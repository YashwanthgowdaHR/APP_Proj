<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_script_include">
    <sys_script_include action="INSERT_OR_UPDATE">
        <access>package_private</access>
        <active>true</active>
        <api_name>x_1131046_aa_man_0.CommonClass</api_name>
        <caller_access/>
        <client_callable>false</client_callable>
        <description>Provides a methods used across all the scripts.</description>
        <name>CommonClass</name>
        <script><![CDATA[var CommonClass = Class.create();
CommonClass.prototype = {
    initialize: function() {
        this.defaultPass = "abc@123123";
        this.log = "SI | CommonClass | ";
    },
    type: 'CommonClass',

    //Constants
    IST: 19800000,

    //Object initialization
    apiClass: new APIClass(this.defaultPass),
    baseClass: new BaseClass(),
    recordClass: new RecordClass(),
    userRequestsGR: new GlideRecord(new BaseClass().getUserRequestsTableName()),
    usersGR: new GlideRecord(new BaseClass().getUsersTableName()),
    rolesGR: new GlideRecord(new BaseClass().getRolesTableName()),
    //Methods
    addEvent: function(event, rec, p1, p2) {
        gs.info(this.log + " addEvent >> " + event);
        gs.eventQueue(name = event, record = rec, parm1 = p1, parm2 = p2);
    },
    approveUser: function(input) {
        var logName = this.log + "approveUser >> ";
        var isCreated = false;
        var errorMsg = "";

        if (!this.isAdmin()) {
            gs.error(logName + " Unknown Access found");
            // Add Mail Notification when someone other than admin tried to access it.
            errorMsg = "You don't have access to perform this action.";
        } else {
            var sts = "pending";

            gs.info(logName + "Creating the user.");

            // approve the req and create the user in AA
            var result = this.createUser(input);
            if (result.isCreated) {
                sts = "granted";
                isCreated = true;
            } else
                errorMsg = result.msg;
            gs.info(logName + " Status: " + sts);
            // var details = {
            //     sts: sts,
            //     name: input.name,
            //     pass: this.defaultPass,
            //     reason: input.rejectReason || ""
            // };
            //this.addEvent(this.event1, this.reqAccessGR, input.mailID, JSON.stringify(details));

        }
        return {
            isCreated,
            errorMsg
        };
    },
    createUser: function(record) {
        var userInfo = {
            username: record.username,
            firstName: record.firstName,
            lastName: record.lastName,
            mailID: record.mailID,
            roleIDs: record.roleIDs,
            licenses: record.licenses,
        };
        var logName = this.log + "createUser >> ";
        gs.info(logName + "Request sent to Automation Anywhere for the User creation.");
        var output = this.apiClass.createUser(userInfo);
        if (output.isCreated) {
            //this.updateIDAndStatus(record.recordSysID, "approved");
            let status = "approved";
            var sts = this.recordClass.updateRecord(this.userRequestsGR.getTableName(), recordSysID, {
                status
            });
            //this.triggerScheduledJob("InsertUsers");
            gs.info(sts ? logName + "updated successfully" : logName + " Failed to update the ID and Status of the record.");
        }
        return output;
    },
    getAllReq: function() {
        var logName = this.log + "getAllReq >> ";
        if (!this.isAdmin()) {
            gs.error(logName + " Unknown Access found");
            // Add Mail Notification when someone other than admin tried to access it.
            return;
        } else {
            gs.info(logName + "get all the requests.");
            var reqData = [];
            var i = 0;
            var gd = new GlideDate();
            let table = this.userRequestsGR;
            table.orderByDesc('sys_created_on');
            table.query();
            while (table.next()) {
                let gdt = new GlideDateTime(table.sys_created_on.toString());
                gdt.add(this.IST);
                gd.setValue(gdt.getValue());
                reqData.push({
                    no: ++i,
                    name: table.getValue('name').toString(),
                    username: table.getValue('username').toString(),
                    mailID: table.getValue('mail_id').toString(),
                    environment: table.getDisplayValue('environment').toString(),
                    requestedOn: gd.getByFormat("dd-MMM-yyyy hh:mm a"),
                    status: table.getDisplayValue('status').toString(),
                });
            }
            return reqData;
        }
    },
    getAllPendingReq: function() {
        var logName = this.log + "getAllPendingReq >> ";
        if (!this.isAdmin()) {
            gs.error(logName + " Unknown Access found");
            // Add Mail Notification when someone other than admin tried to access it.
            return;
        } else {
            gs.info(logName + "getting all the pending requests.");
            var reqData = [];
            var i = 0;
            var gd = new GlideDate();
            let table = this.userRequestsGR;
            table.addQuery('status', 'pending');
            table.orderByDesc('sys_created_on');
            table.query();
            while (table.next()) {
                let gdt = new GlideDateTime(table.sys_created_on.toString());
                gdt.add(this.IST);
                gd.setValue(gdt.getValue());
                reqData.push({
                    no: ++i,
                    firstName: table.getValue('first_name'),
                    lastName: table.getValue('last_name'),
                    recordSysID: table.getUniqueValue(),
                    name: table.getValue('name').toString(),
                    username: table.getValue('username').toString(),
                    environment: table.getDisplayValue('environment').toString(),
                    mailID: table.getValue('mail_id').toString(),
                    requestedOn: gd.getByFormat("dd-MMM-yyyy hh:mm a"),
                });
            }
            return reqData;
        }
    },
    getRoleName: function(rolesIDs) {
        if (this.isEmpty(rolesIDs))
            return;
        var table = new GlideRecord(new BaseClass().getRolesTableName());
        var tmpRoles = Array.isArray(rolesIDs) ? rolesIDs : rolesIDs.split(",");
        var roles = [];

        tmpRoles.forEach(function(id) {
            table.get(id.toString());
            roles.push(table.getValue('name'));
        });
        if (Array.isArray(rolesIDs)) {
            return roles;
        } else {
            return roles.length > 0 ? roles.join(";") : null;
        }
    },
    getLicenseName: function(licenseIDs) {
        if (this.isEmpty(licenseIDs))
            return;

        var tmpLicenses = Array.isArray(licenseIDs) ? licenseIDs : licenseIDs.split(",");
        var licenses = [];

        tmpLicenses.forEach(function(id) {
            var table = new GlideRecord(new BaseClass().getLicenseTableName());
            table.addQuery('id', id);
            table.query();
            table.next();
            licenses.push(table.getValue('detail'));
        });
        if (Array.isArray(licenseIDs)) {
            return licenses;
        } else {
            return licenses.length > 0 ? licenses.join(";") : null;
        }
    },

    getUserLicenses: function(licenseIDs) {
        if (this.isEmpty(licenseIDs))
            return;
        var tmpLicenses = Array.isArray(licenseIDs) ? licenseIDs : licenseIDs.split(",");
        var licenses = [];

        tmpLicenses.forEach(function(id) {
            var table = new GlideRecord(new BaseClass().getLicenseTableName());
            table.addQuery('id', id);
            table.query();
            table.next();
            licenses.push({
                'detail': table.getValue('detail'),
                'id': id
            });
        });
        return licenses;
    },

    getUserRoles: function(rolesIDs) {
        if (this.isEmpty(rolesIDs))
            return;
        var table = new GlideRecord(new BaseClass().getRolesTableName());
        var tmpRoles = Array.isArray(rolesIDs) ? rolesIDs : rolesIDs.split(",");
        var roles = [];

        tmpRoles.forEach(function(id) {
            table.get(id.toString());
            roles.push({
                name: table.getValue('name'),
                sysID: table.getValue('sys_id')
            });
        });
        return roles;
    },
    getRoles: function() {
        var roles = [];
        var gr = this.rolesGR;
        gr.query();
        while (gr.next())
            roles.push({
                name: gr.getValue('name'),
                sysID: gr.getValue('sys_id')
            });
        return roles;
    },
    getUsersList: function() {
        var logName = this.log + "getUsersList >> ";
        if (!this.isAdmin()) {
            gs.error(logName + " Unknown Access found");
            // Add Mail Notification when someone other than admin tried to access it.
            return;
        } else {
            gs.info(logName + "get the existing users.");
            var userData = [];
            var i = 0;
            let table = this.usersGR;
            table.orderBy('first_name');
            table.query();
            while (table.next()) {
                var tmpRoles = this.getRoleName(table.getValue("roles"));
                var tmpLicenses = this.getLicenseName(table.getValue("licenses"));
                userData.push({
                    no: ++i,
                    firstName: table.getValue('first_name'),
                    lastName: table.getValue('last_name'),
                    username: table.getValue('username'),
                    mailID: table.getValue('mail_id'),
                    environment: table.getDisplayValue('environment').toString(),
                    roles: tmpRoles,
                    licenses: tmpLicenses,
                    recordSysID: table.getValue('sys_id'),
                });
            }
            return userData;
        }
    },
    getUserByID: function(sysID) {
        var logName = this.log + "getUserbyID >> ";
        if (!this.isAdmin()) {
            gs.error(logName + " Unknown Access found");
            // Add Mail Notification when someone other than admin tried to access it.
            return;
        } else {
            gs.info(logName + "Fetching user data by sysID: " + sysID);
            var userData = this.recordClass.getRecord(new BaseClass().getUsersTableName(), sysID);
            gs.info(logName + "Fetched successfully");
            var tmpRoles = this.getUserRoles(userData.roles);
            var tmpLicenses = this.getUserLicenses(userData.licenses);
            return {
                userID: userData.user_id,
                firstName: userData.first_name,
                lastName: userData.last_name,
                username: userData.username,
                mailID: userData.mail_id,
                environment: userData.environment,
                roles: tmpRoles,
                licenses: tmpLicenses,
                recordSysID: userData.sys_id,
                // enableAutoLogin: userData.'enable_auto_login'),
            };
        }
    },
    isAdmin: function() {
        return gs.getUser().isMemberOf(this.baseClass.getAdminGroupID());
    },
    isEmpty: function(obj) {
        return obj == null || obj == "";
    },
    isValidUser: function() {
        return gs.getUser().isMemberOf(this.baseClass.getUserGroupID());
    },
    rejectUser: function(record) {
        var logName = this.log + "approveOrRejectUser >> ";
        if (!this.isAdmin()) {
            gs.error(logName + " Unknown Access found");
            // Add Mail Notification when someone other than admin tried to access it.
            return;
        }

        let status = "rejected",
            reason_to_reject = record.reason;

        var sts = this.recordClass.updateRecord(this.userRequestsGR.getTableName(), recordSysID, {
            status,
            reason_to_reject
        });

        gs.info(sts ? logName + "updated successfully" : logName + " Failed to update the status &  reason for rejection of the record.");
        // var details = {
        //     sts: sts,
        //     name: record.name,
        //     pass: this.defaultPass,
        //     reason: record.rejectReason || ""
        // };
        // this.addEvent(this.event1, this.reqAccessGR, record.mailID, JSON.stringify(details));

    },
    updateIDAndStatus: function(recordSysID, status) {
        var logName = this.log + "updateIDAndStatus >> ";
        var sts = this.recordClass.updateRecord(this.userRequestsGR.getTableName(), recordSysID, {
            status
        });
        // gs.info("Updating Users database");
        // SncTriggerSynchronizer.executeNow("InsertUsers");
        //this.triggerScheduledJob("InsertUsers");
        gs.info(sts ? logName + "updated successfully" : logName + " Failed to update the ID and Status of the record.");
    },
    triggerScheduledJob: function(jobName) {
        // Get the instance of the ScheduledJobManager
        var jobManager = new GlideScheduleManager();

        // Check if the scheduled job exists
        if (jobManager.getSchedule(jobName)) {
            // Execute the scheduled job
            jobManager.executeNow(jobName);
            gs.info("Scheduled job '" + jobName + "' executed successfully.");
        } else {
            gs.error("Scheduled job '" + jobName + "' does not exist.");
        }
    },
};]]></script>
        <sys_class_name>sys_script_include</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2024-02-14 13:55:03</sys_created_on>
        <sys_id>595189e6079482101808fe4f7c1ed021</sys_id>
        <sys_mod_count>89</sys_mod_count>
        <sys_name>CommonClass</sys_name>
        <sys_package display_value="AA Management" source="x_1131046_aa_man_0">7630a7f79340021030ae7c5efaba105f</sys_package>
        <sys_policy>read</sys_policy>
        <sys_scope display_value="AA Management">7630a7f79340021030ae7c5efaba105f</sys_scope>
        <sys_update_name>sys_script_include_595189e6079482101808fe4f7c1ed021</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2024-03-21 13:16:44</sys_updated_on>
    </sys_script_include>
</record_update>
