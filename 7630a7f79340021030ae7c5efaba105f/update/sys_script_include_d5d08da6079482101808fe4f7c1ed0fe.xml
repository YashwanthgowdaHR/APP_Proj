<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_script_include">
    <sys_script_include action="INSERT_OR_UPDATE">
        <access>package_private</access>
        <active>true</active>
        <api_name>x_1131046_aa_man_0.RecordClass</api_name>
        <caller_access/>
        <client_callable>false</client_callable>
        <description>Provides methods to create, udpate, delete a record</description>
        <name>RecordClass</name>
        <script><![CDATA[var RecordClass = Class.create();
RecordClass.prototype = {
    initialize: function() {
        this.log = "SI - RecordClass | ";
    },

    type: 'RecordClass',


    baseClass: new BaseClass(),


    deleteRecord(tableName, recordSysID) {
        var logName = this.log + "deleteRecord >> ";
        var gr = new GlideRecord(tableName);
        gr.addQuery('sys_id', recordSysID);
        gr.query();
        if (gr.next()) {
            gr.deleteRecord();
            gs.info(logName + "deleted successfully");
        } else
            gs.info(logName + "given sys_id " + recordSysID + " is not exists. skipping the operation");
    },

    /**
     * Fetch the FieldValue of the each record from the given table where record is identified using the given column & value
     * @param {string} tableName - table from which field will be extracted.
     * @param {string} fieldName - field to be extracted
     * @param {string} columnName - columnName in which filter will applied.
     * @param {string} columnValue - columnValue
     * @return {string/number} fieldValue - returns fieldValue if found, else 0.
     */
    fetchField: function(tableName, fieldName, columnName, columnValue) {
        var gr = new GlideRecord(tableName);
        gr.addQuery(columnName, columnValue);
        gr.query();
        if (gr.hasNext()) {
            gr.next();
            return gr.getValue(fieldName);
        } else {
            return 0;
        }
    },

    /**
     * Fetch the given field value of a record from the given table where record is identified using the given column and value present in the given list
     * @param {string} tableName - table from which given field will be extracted.
     * @param {string} fieldName - field to be extracted
     * @param {string} columnName - column in which filter will applied.
     * @param {list} valueList - list that contains the value (for role, it is id & for license, it is name) using which their respective field value will be extracted from the table
     * @return {string} resultString - comma separated field value of respective values passed in list.
     */
    fetchGivenField: function(tableName, fieldName, columnName, valueList) {
        var logName = this.log + "fetchGivenField >> ";
        var resultString = "";

        gs.info(logName + "Fetching the " + fieldName + " from table: " + tableName + " under the column: " + columnName);
        valueList.forEach((value) => {
            var result = this.fetchField(tableName, fieldName, columnName, value);
            if (result) {
                if (!resultString)
                    resultString = resultString + "," + String(result);
                else
                    resultString = String(result);
            } else {
                gs.info(logName + "Given Field doesn't exists for the value:" + value + "under the column: " + columnName + " in table: " + tableName);
            }
        });

        return resultString;
    },

    /**
     * @param {string} tableName - Table Name.
     * @param {string} recordSysID - sys_id of record to filter and update its values .
     * @return {object} - returns the record that matches with recordSysID containing all the fields.
     */
    getRecord: function(tableName, recordSysID) {
        var logName = this.log + "GetRecord >> ";
        var data = {};
        if (!this.isTableExists(tableName)) {
            gs.error(logName + "Given table: " + tableName + " doesn't exists.");
            return data;
        }
        var gr = new GlideRecord(tableName);
        gr.addQuery('sys_id', recordSysID);
        gr.query();
        if (gr.next()) {
            for (var key in gr) {
                data[key] = gr.getValue(key);
            }
        } else
            gs.error(logName + " Given record with sysId: " + recordSysID + " doesn't exists in the table:" + tableName);
        return data;
    },

    /**
     * @param {string} username - username of the user.
     * @return {object} - returns the object containing {firstName, lastName, fullName, mailID} extracted from users table which matches with username containing all the fields.
     */
    getUserDataByUserName(username) {
        var logName = this.log + "getUserDataByUserName >> ";
        if (!this.isAdmin) {
            gs.error(log + " Unknown Access found");
            return;
        }
        gs.info("Fetching user details of " + username);
        gr = new GlideRecord('sys_user');
        gr.addEncodedQuery('user_name=' + username);
        gr.query();
        var result;
        if (gr.hasNext()) {
            gr.next();
            result = {
                firstName: gr.first_name.toString(),
                lastName: gr.last_name.toString(),
                fullName: gr.name.toString(),
                mailID: gr.email.toString(),
            };
        }
        return result;
    },
    isAdmin: function() {
        return gs.getUser().isMemberOf(baseClass.getAdminGroupID());
    },
    isTableExists: function(tableName) {
        return gs.tableExists(tableName);
    },
    /**
     * @param {string} tableName - Table Name.
     * @param {string} recordSysID - sys_id of record to filter and update its values .
     * @param {string} column - column id from which data need to be read.
     * @return {string} - string of values that read from the column.
     */
    getDisplayValueFromRecord: function(tableName, recordSysID, column) {
        var gr = new GlideRecord(tableName);
        gr.addQuery("sys_id", recordSysID);
        gr.query();
        if (gr.next()) {
            return gr.getDisplayValue(column).toString();
        }
    },
    /**
     * @param {string} tableName - Table Name.
     * @param {string} recordSysID - sys_id of record to filter and update its values .
     * @param {json} data - should contain key which is respective column names, in order to update the values correctly.
     * @return {boolean} - true if updated successfully, else false
     */
    updateRecord: function(tableName, recordSysID, data) {
        var logName = this.log + "updateRecord >> ";
        if (!this.isTableExists(tableName)) {
            gs.error(logName + "Given table: " + tableName + " doesn't exists.");
            return;
        }
        var gr = new GlideRecord(tableName);
        gr.addQuery("sys_id", recordSysID);
        gr.query();
        if (gr.next()) {
            for (var key in data) {
                gr.setValue(key, data[key]);
            }
            gr.update('updated record ID: ' + recordSysID);
            return true;
        } else {
            gs.error(logName + " Given record with sysId: " + sysId + " doesn't exists in the table:" + tableName);
            return;
        }

    }
};]]></script>
        <sys_class_name>sys_script_include</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2024-02-14 13:52:54</sys_created_on>
        <sys_id>d5d08da6079482101808fe4f7c1ed0fe</sys_id>
        <sys_mod_count>3</sys_mod_count>
        <sys_name>RecordClass</sys_name>
        <sys_package display_value="AA Management" source="x_1131046_aa_man_0">7630a7f79340021030ae7c5efaba105f</sys_package>
        <sys_policy>read</sys_policy>
        <sys_scope display_value="AA Management">7630a7f79340021030ae7c5efaba105f</sys_scope>
        <sys_update_name>sys_script_include_d5d08da6079482101808fe4f7c1ed0fe</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2024-03-27 10:57:47</sys_updated_on>
    </sys_script_include>
</record_update>
