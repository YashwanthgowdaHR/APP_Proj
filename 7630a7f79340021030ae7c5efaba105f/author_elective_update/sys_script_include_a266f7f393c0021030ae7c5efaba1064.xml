<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_script_include">
    <sys_script_include action="DELETE">
        <access>package_private</access>
        <active>true</active>
        <api_name>x_1131046_aa_man_0.CommonMethods</api_name>
        <caller_access/>
        <client_callable>false</client_callable>
        <description/>
        <name>CommonMethods</name>
        <script><![CDATA[var CommonMethods = Class.create();
CommonMethods.prototype = {
    initialize: function() {
		this.log = "SI - CommonMethods | ";
    },

    type: 'CommonMethods',
	deleteRecord(tableName, recordSysID) {
        var logName = this.log + "deleteRecord >> ";
        var gr = new GlideRecord(tableName);
        gr.addQuery('sys_id', recordSysID);
        gr.query();
        if (gr.next()) {
            gr.deleteRecord();
            gs.info(logName + "deleted successfully");
        } else
            gs.info(logName + "given sys_id " + recordSysID + " is not exists. skipping the operation");
    },
    getRecord: function (tableName, recordSysID) {
        var logName = this.log + "GetRecord >> ";
        var data = {};
        if (!this.isTableExists(tableName)) {
            gs.error(logName + "Given table: " + tableName + " doesn't exists.");
            return data;
        }
        var gr = new GlideRecord(tableName);
        gr.addQuery('sys_id', recordSysID);
        gr.query();
        if (gr.next()) {
            for (var key in gr) {
                data[key] = gr.getValue(key);
            }
        } else
            gs.error(logName + " Given record with sysId: " + recordSysID + " doesn't exists in the table:" + tableName);
        return data;
    },
    getUserDataByUID(uID) {
        var logName = this.log + "getUserDataByUID >> ";
        if (!this.isAdmin) {
            gs.error(log + " Unknown Access found");
            return;
        }
        gs.info("Fetching user details of " + uID);
        gr = new GlideRecord('sys_user');
        gr.addEncodedQuery('user_name=' + uID);
        gr.query();
        var result;
        if (gr.hasNext()) {
            gr.next();
            result = {
                firstName: gr.first_name.toString(),
                lastName: gr.last_name.toString(),
                mailID: gr.email.toString(),
                uID: uID,
            };
        }
        return result;
    },
    isAdmin: function () {
        return gs.getUser().isMemberOf(this.adminGroupID);
    },
    isTableExists: function (tableName) {
        return gs.tableExists(tableName);
    },
    /**
     * @param {string} tableName - Table Name.
     * @param {string} recordSysID - sys_id of record to filter and update its values .
     * @param {string} column - column id from which data need to be read.
     * @return {string} - string of values that read from the column.
     */
    getDisplayValueFromRecord: function (tableName, recordSysID, column) {
        var gr = new GlideRecord(tableName);
        gr.addQuery("sys_id", recordSysID);
        gr.query();
        if (gr.next()) {
            return gr.getDisplayValue(column).toString();
        }
    },
    /**
     * @param {string} tableName - Table Name.
     * @param {string} recordSysID - sys_id of record to filter and update its values .
     * @param {json} data - should contain key which is respective column names, in order to update the values correctly.
     * @return {boolean} - true if updated successfully, else false
     */
    updateRecord: function (tableName, recordSysID, data) {
        var logName = this.log + "updateRecord >> ";
        if (!this.isTableExists(tableName)) {
            gs.error(logName + "Given table: " + tableName + " doesn't exists.");
            return;
        }
        var gr = new GlideRecord(tableName);
        gr.addQuery("sys_id", recordSysID);
        gr.query();
        if (gr.next()) {
            for (var key in data) {
                gr.setValue(key, data[key]);
            }
            gr.update('updated record ID: ' + recordSysID);
            return true;
        } else {
            gs.error(logName + " Given record with sysId: " + sysId + " doesn't exists in the table:" + tableName);
            return;
        }

    }
};]]></script>
        <sys_class_name>sys_script_include</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2024-02-06 14:07:48</sys_created_on>
        <sys_id>a266f7f393c0021030ae7c5efaba1064</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_name>CommonMethods</sys_name>
        <sys_package display_value="AA Management" source="x_1131046_aa_man_0">7630a7f79340021030ae7c5efaba105f</sys_package>
        <sys_policy>read</sys_policy>
        <sys_scope display_value="AA Management">7630a7f79340021030ae7c5efaba105f</sys_scope>
        <sys_update_name>sys_script_include_a266f7f393c0021030ae7c5efaba1064</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2024-02-06 14:07:48</sys_updated_on>
    </sys_script_include>
<sys_update_version action="INSERT_OR_UPDATE">
        <action>DELETE</action>
        <application display_value="AA Management">7630a7f79340021030ae7c5efaba105f</application>
        <file_path/>
        <instance_id>3d112a36db4337449df22f17d4961918</instance_id>
        <instance_name>dev90973</instance_name>
        <name>sys_script_include_a266f7f393c0021030ae7c5efaba1064</name>
        <payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update table="sys_script_include"&gt;
    &lt;sys_script_include action="INSERT_OR_UPDATE"&gt;
        &lt;access&gt;package_private&lt;/access&gt;
        &lt;active&gt;true&lt;/active&gt;
        &lt;api_name&gt;x_1131046_aa_man_0.CommonMethods&lt;/api_name&gt;
        &lt;caller_access/&gt;
        &lt;client_callable&gt;false&lt;/client_callable&gt;
        &lt;description/&gt;
        &lt;name&gt;CommonMethods&lt;/name&gt;
        &lt;script&gt;&lt;![CDATA[var CommonMethods = Class.create();
CommonMethods.prototype = {
    initialize: function() {
		this.log = "SI - CommonMethods | ";
    },

    type: 'CommonMethods',
	deleteRecord(tableName, recordSysID) {
        var logName = this.log + "deleteRecord &gt;&gt; ";
        var gr = new GlideRecord(tableName);
        gr.addQuery('sys_id', recordSysID);
        gr.query();
        if (gr.next()) {
            gr.deleteRecord();
            gs.info(logName + "deleted successfully");
        } else
            gs.info(logName + "given sys_id " + recordSysID + " is not exists. skipping the operation");
    },
    getRecord: function (tableName, recordSysID) {
        var logName = this.log + "GetRecord &gt;&gt; ";
        var data = {};
        if (!this.isTableExists(tableName)) {
            gs.error(logName + "Given table: " + tableName + " doesn't exists.");
            return data;
        }
        var gr = new GlideRecord(tableName);
        gr.addQuery('sys_id', recordSysID);
        gr.query();
        if (gr.next()) {
            for (var key in gr) {
                data[key] = gr.getValue(key);
            }
        } else
            gs.error(logName + " Given record with sysId: " + recordSysID + " doesn't exists in the table:" + tableName);
        return data;
    },
    getUserDataByUID(uID) {
        var logName = this.log + "getUserDataByUID &gt;&gt; ";
        if (!this.isAdmin) {
            gs.error(log + " Unknown Access found");
            return;
        }
        gs.info("Fetching user details of " + uID);
        gr = new GlideRecord('sys_user');
        gr.addEncodedQuery('user_name=' + uID);
        gr.query();
        var result;
        if (gr.hasNext()) {
            gr.next();
            result = {
                firstName: gr.first_name.toString(),
                lastName: gr.last_name.toString(),
                mailID: gr.email.toString(),
                uID: uID,
            };
        }
        return result;
    },
    isAdmin: function () {
        return gs.getUser().isMemberOf(this.adminGroupID);
    },
    isTableExists: function (tableName) {
        return gs.tableExists(tableName);
    },
    /**
     * @param {string} tableName - Table Name.
     * @param {string} recordSysID - sys_id of record to filter and update its values .
     * @param {string} column - column id from which data need to be read.
     * @return {string} - string of values that read from the column.
     */
    getDisplayValueFromRecord: function (tableName, recordSysID, column) {
        var gr = new GlideRecord(tableName);
        gr.addQuery("sys_id", recordSysID);
        gr.query();
        if (gr.next()) {
            return gr.getDisplayValue(column).toString();
        }
    },
    /**
     * @param {string} tableName - Table Name.
     * @param {string} recordSysID - sys_id of record to filter and update its values .
     * @param {json} data - should contain key which is respective column names, in order to update the values correctly.
     * @return {boolean} - true if updated successfully, else false
     */
    updateRecord: function (tableName, recordSysID, data) {
        var logName = this.log + "updateRecord &gt;&gt; ";
        if (!this.isTableExists(tableName)) {
            gs.error(logName + "Given table: " + tableName + " doesn't exists.");
            return;
        }
        var gr = new GlideRecord(tableName);
        gr.addQuery("sys_id", recordSysID);
        gr.query();
        if (gr.next()) {
            for (var key in data) {
                gr.setValue(key, data[key]);
            }
            gr.update('updated record ID: ' + recordSysID);
            return true;
        } else {
            gs.error(logName + " Given record with sysId: " + sysId + " doesn't exists in the table:" + tableName);
            return;
        }

    }
};]]&gt;&lt;/script&gt;
        &lt;sys_class_name&gt;sys_script_include&lt;/sys_class_name&gt;
        &lt;sys_created_by&gt;admin&lt;/sys_created_by&gt;
        &lt;sys_created_on&gt;2024-02-06 14:07:48&lt;/sys_created_on&gt;
        &lt;sys_id&gt;a266f7f393c0021030ae7c5efaba1064&lt;/sys_id&gt;
        &lt;sys_mod_count&gt;0&lt;/sys_mod_count&gt;
        &lt;sys_name&gt;CommonMethods&lt;/sys_name&gt;
        &lt;sys_package display_value="AA Management" source="x_1131046_aa_man_0"&gt;7630a7f79340021030ae7c5efaba105f&lt;/sys_package&gt;
        &lt;sys_policy&gt;read&lt;/sys_policy&gt;
        &lt;sys_scope display_value="AA Management"&gt;7630a7f79340021030ae7c5efaba105f&lt;/sys_scope&gt;
        &lt;sys_update_name&gt;sys_script_include_a266f7f393c0021030ae7c5efaba1064&lt;/sys_update_name&gt;
        &lt;sys_updated_by&gt;admin&lt;/sys_updated_by&gt;
        &lt;sys_updated_on&gt;2024-02-06 14:07:48&lt;/sys_updated_on&gt;
    &lt;/sys_script_include&gt;
&lt;/record_update&gt;</payload>
        <payload_hash>1143162122</payload_hash>
        <record_name>CommonMethods</record_name>
        <reverted_from/>
        <source>d5bf4a82075402101808fe4f7c1ed08e</source>
        <source_table>sys_upgrade_history</source_table>
        <state>previous</state>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2024-02-13 06:19:15</sys_created_on>
        <sys_id>7bbf4e82075402101808fe4f7c1ed001</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_recorded_at>18da11ea1d80000001</sys_recorded_at>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2024-02-13 06:19:15</sys_updated_on>
        <type>Script Include</type>
        <update_guid>3bbf4e82d254021031d2680071413101</update_guid>
        <update_guid_history>3bbf4e82d254021031d2680071413101:1143162122</update_guid_history>
    </sys_update_version>
    <sys_metadata_delete action="INSERT_OR_UPDATE">
        <sys_audit_delete/>
        <sys_class_name>sys_metadata_delete</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2024-02-14 13:53:09</sys_created_on>
        <sys_db_object display_value="" name="sys_script_include">sys_script_include</sys_db_object>
        <sys_id>0566b037b83c45f880a7213574e08684</sys_id>
        <sys_metadata>a266f7f393c0021030ae7c5efaba1064</sys_metadata>
        <sys_mod_count>0</sys_mod_count>
        <sys_name>CommonMethods</sys_name>
        <sys_package display_value="AA Management" source="x_1131046_aa_man_0">7630a7f79340021030ae7c5efaba105f</sys_package>
        <sys_parent/>
        <sys_policy>read</sys_policy>
        <sys_scope display_value="AA Management">7630a7f79340021030ae7c5efaba105f</sys_scope>
        <sys_scope_delete display_value="">2be73dab4eaf4736a09a5739e1636be9</sys_scope_delete>
        <sys_update_name>sys_script_include_a266f7f393c0021030ae7c5efaba1064</sys_update_name>
        <sys_update_version display_value="sys_script_include_a266f7f393c0021030ae7c5efaba1064">7bbf4e82075402101808fe4f7c1ed001</sys_update_version>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2024-02-14 13:53:09</sys_updated_on>
    </sys_metadata_delete>
</record_update>
