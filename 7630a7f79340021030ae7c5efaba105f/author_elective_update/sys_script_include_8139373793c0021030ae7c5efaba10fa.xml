<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_script_include">
    <sys_script_include action="DELETE">
        <access>package_private</access>
        <active>true</active>
        <api_name>x_1131046_aa_man_0.AutomationAnywhere_API</api_name>
        <caller_access/>
        <client_callable>false</client_callable>
        <description>Provides methods to interact with Automation Anywhere</description>
        <name>AutomationAnywhere_API</name>
        <script><![CDATA[var AutomationAnywhere_API = Class.create();
AutomationAnywhere_API.prototype = {
    initialize: function (defaultPass = "") {
        this.defaultPass = defaultPass;
    },
    type: 'AutomationAnywhere_API',
    restSrc: 'x_1131046_aa_man_0.AA_API',
    log: "SI | AutomationAnywhere_API | ",
    endpoint: "https://merck-dev.my.automationanywhere.digital/",
    environment: "DEV",

    /**
     * @param {json} user - user json should contains keys i.e 
     * firstName[string],lastName[string],mailId[string],uID[string],roles[list] - list containing role IDs(NOT NAME).
     * @return {json} result - result will have keys i.e. 
     * isCreated[bool] - if the user is created, it will be true, else false
     * id[number] - if isCreated is true, then it will contain id of the user and 
     * msg[string] - if user creation failed[isCreated=false], then msg will holds the error message.
     */
    createUser: function (user) {
        var logName = this.log + "CreateUser >> ";
        var endpoint = this.endpoint + "v2/usermanagement/users";
        var result = {};

        gs.info(logName + " Received a request to Create a New user with details: " + JSON.stringify(user));

        try {
            var tmpRoles = user.roleIDs.split(","),
                tmpLicenses = user.licenses.split(",");

            var roles = [],
                licenses = [];
            // tmpRoles.forEach((id) => roles.push({"id": id}));

            tmpRoles.forEach((id) => roles.push(Number(id)));

            tmpLicenses.forEach((name) => licenses.push(name));

            //Initialize the required REST Message
            var req = this.makeReq('CreateUser');
            req.setStringParameterNoEscape("endpoint", endpoint);
            req.setStringParameterNoEscape("authorization", this.getToken());
            req.setStringParameterNoEscape('firstName', user.firstName);
            req.setStringParameterNoEscape('lastName', user.lastName);
            req.setStringParameterNoEscape('mailID', user.mailID);
            req.setStringParameterNoEscape('pass', this.defaultPass);
            req.setStringParameterNoEscape('userName', user.uID);
            req.setStringParameterNoEscape('roles', roles);
            req.setStringParameterNoEscape('licenses', licenses);
            gs.info(logName + " Creating User...");

            var response = req.execute();
            var responseBody = response.getBody();
            var httpStatus = response.getStatusCode();
            gs.info(logName + "Result - HTTP status Code: " + httpStatus);
            var parsed = JSON.parse(responseBody);
            if (httpStatus == 201) {
                // User Created Successfully
                result.isCreated = true;
                gs.info(logName + "SUCCESS | New ID is " + parsed.id);
                result.id = parsed.id;
            } else {
                //Failed to create user through api
                result.isCreated = false;
                result.msg = parsed.message;
                gs.error(logName + "FAILED | Reason is " + parsed.message);
            }
        } catch (e) {
            gs.error(logName + "Exception: " + e);
            result.isCreated = false;
            result.msg = "An error occurred while creating the user.";
        }
        return result;
    },

    /**
     * @param {string} uID - x_m_uid of the user to check whether it matches with existing uID of user who possessing "id". In order to avoid deletion of other users.
     * @param {string} userID - id of the user which was received after user has been created.
     * @return {json} result - result will have keys i.e. isCreated[bool] - if the user is created, it will be true and msg[string] - if user creation failed, then msg will holds the error message.
     */
    deleteUsr: function (uID, userID) {
        var logName = this.log + "DeleteUsr >> ";
        var endpoint = this.endpoint + "v2/usermanagement/users/";

        if (userID) {
            gs.info(logName + "Checking if user with id " + userID + " exists in AA...");
            var exists = this.getUserByID(userID);
            if (!exists) {
                gs.error(logName + "User doesn't exists in Automation Anywhere.");
                return 1;
            } else {
                if (exists.username.toLowerCase() == uID.toLowerCase()) {
                    gs.error(logName + "Username matched with uID...");
                    endpoint = endpoint + userID;

                    var req = this.makeReq('DeleteUser');
                    req.setStringParameterNoEscape("endpoint", endpoint);
                    req.setStringParameterNoEscape("authorization", this.getToken());
                    var response = req.execute();
                    var responseBody = response.getBody();
                    var httpStatus = response.getStatusCode();
                    gs.info(logName + "SUCCESS | Response Status: " + httpStatus);
                    if (httpStatus == 204)
                        return 0;
                    else {
                        gs.error(logName + "FAILED | Reason is " + responseBody);
                    }
                } else {
                    gs.error(logName + "You are trying to delete user having UID: " + uID + ". But, Username recorded with above ID in AA is " + exists.username);
                    return 1;
                }
            }
        }
    },

    /**
     * @param {string} tableName - tablename from which sysID will be extracted.
     * @param {string} columnName - columnName in which filter will applied.
     * @param {string} columnValue - columnValue
     * @return {string/number} sysID - returns sysID if found, else 0.
     */
    fetchSysID: function (tableName, columnName, columnValue) {
        var gr = new GlideRecord(tableName);
        gr.addQuery(columnName, columnValue);
        gr.query();
        if (gr.next()) {
            gr.next();
            return gr.getUniqueValue();
        } else {
            return 0;
        }
    },

    /**
     * @param {string} tableName - tablename from which sysIDs will be extracted.
     * @param {string} columnName - columnName in which filter will applied.
     * @param {list} valueList - list that contains the ids using which their respective sysId will be extracted from the table
     * @return {string} sysIds - sysIds of respective IDs passed in idList.
     */
    fetchAllSysIDFromGivenList: function (tableName, columnName, valueList) {
        var logName = this.log + "fetchAllSysIDFromGivenList >> ";
        var sysIDs = "";

        gs.info(" Fetching the sys_ids from table: "+ tableName + " under the column: "+columnName);
        valueList.forEach((value) => {
            var sysID = this.fetchSysID(tableName, columnName, value);
            if (sysID) {
                sysIDs = sysIDs + "," + String(sysID);
            } else {
                gs.info("Sys ID doesn't exists for the value:" + value + "under the column: " + columnName + " in table: " + tableName);
            }
        });

        return sysIDs;
    },

    getToken: function () {
        // API call made to AA to get the TOKEN

        var endpoint = this.endpoint + "v2/authentication";
        var req = this.makeReq('Authentication');
        req.setStringParameterNoEscape("endpoint", endpoint);
        req.setStringParameterNoEscape('api_key', 'L|fJA>l}P@>kyY|W;n]j3vxeJ__aF`hXUr|hG22w');
        req.setStringParameterNoEscape('username', 'X253816');
        var response = req.execute();
        var responseBody = response.getBody();
        var httpStatus = response.getStatusCode();
        if (httpStatus == 200) {
            // Get the Access Token
            return JSON.parse(responseBody).token;
        }
    },

    /**
     * @param {string} id - id of the user which was received after user has been created.
     * @return {json} result - result will contain all the keys that user has configured or assigned after user has been created.
     */
    getUserByID: function (userID) {
        var logName = this.log + "getUserByID >> ";

        // API Call made to AA to get User info by User ID
        if (userID) {
            gs.info(logName + "Checking info for Id: " + userID);
            var endpoint = this.endpoint + "v2/usermanagement/users/" + userID;

            var req = this.makeReq('GetUserByID');
            req.setStringParameterNoEscape("endpoint", endpoint);
            req.setStringParameterNoEscape("authorization", this.getToken());
            req.setStringParameterNoEscape('id', userID);
            var response = req.execute();
            var responseBody = response.getBody();
            var httpStatus = response.getStatusCode();
            gs.info(logName + "Script - Response Status: " + httpStatus);
            if (httpStatus == 404)
                return;
            if (httpStatus == 401)
                return this.getUserByID(userID);
            if (httpStatus == 200)
                return JSON.parse(responseBody);
        }
    },

    insertLicenses: function () {
        // Insert roles into table named "aa_roles". So, to keep updated whenever a new role is created in AA.
        // This method is called for every 6 hours from Scheduled Jobs and add the roles, if the "id" doesn't exists.
        var logName = this.log + "insertLicenses >> ";
        var endpoint = this.endpoint + "v2/license/product/list";

        var req = this.makeReq('GetLicenseList');
        req.setStringParameterNoEscape("endpoint", endpoint);
        req.setStringParameterNoEscape("authorization", this.getToken());
        var response = req.execute();
        var responseBody = response.getBody();
        var httpStatus = response.getStatusCode();
        gs.info(logName + " Response Status: " + httpStatus);
        if (httpStatus == 200) {
            var licenseList = JSON.parse(responseBody).list;
            licenseList.forEach((license) => {
                if ('feature' in license) {
                    var parent = license.name;
                    var feature = license.feature;
                    var gr = new GlideRecord("x_1131046_aa_man_0_licenses");
                    gr.addQuery('id', feature.id);
                    gr.query();
                    if (!gr.hasNext()) {
                        gs.info(logName + "License doesn't exists. Adding it." + license.id);
                        gr.initialize();
                        gr.setValue('id', feature.id);
                        gr.setValue('name', feature.name);
                        gr.setValue('parent', parent);
                        gr.setValue('available_count', feature.availableCount);
                        gr.setValue('purchased_count', feature.purchasedCount);
                        gr.setValue('used_in_this_cr', feature.usedCountByThisCr);
                        gr.setValue('used_in_other_cr', feature.usedCountByAllCr);
                        gr.insert();
                    }
                }
            });
        } else {
            gs.error(logName + " Error Occurred. " + responseBody);
        }
    },

    insertRoles: function () {
        // Insert roles into table named "aa_roles". So, to keep updated whenever a new role is created in AA.
        // This method is called for every 6 hours from Scheduled Jobs and add the roles, if the "id" doesn't exists.
        var logName = this.log + "insertRoles >> ";
        var endpoint = this.endpoint + "v2/usermanagement/roles/list";

        var req = this.makeReq('FetchRoles'); // Create REST Request
        req.setStringParameterNoEscape("endpoint", endpoint);
        req.setStringParameterNoEscape("token", this.getToken()); // Set the Variable value
        var response = req.execute(); // Execute the REST request
        var responseBody = response.getBody(); // Read the RESPONSE
        var httpStatus = response.getStatusCode(); // Read the RESPONSE status Code
        gs.info(logName + " Response Status: " + httpStatus);
        if (httpStatus == 200) {
            var rolesList = JSON.parse(responseBody).list;
            rolesList.forEach((role) => {
                var gr = new GlideRecord("x_snc_accessprov_0_aa_roles");
                gr.addQuery('id', role.id);
                gr.query();
                if (!gr.hasNext()) {
                    gs.info(logName + "Role doesn't exists. Adding it." + role.id);
                    gr.initialize();
                    gr.setValue("id", role.id);
                    gr.setValue("name", role.name);
                    gr.setValue("description", role.description);
                    gr.insert();
                }
            });
        } else {
            gs.error(logName + " Error Occurred. " + responseBody);
        }
    },

    insertUsers: function () {
        var logName = this.log + "insertUsers >> ";
        var endpoint = this.endpoint + "v2/usermanagement/users/list";
        gs.info(logName + "Endpoint: "+endpoint);

        var req = this.makeReq('FetchUsers'); // Create REST Request
        req.setStringParameterNoEscape("endpoint", endpoint);
        req.setStringParameterNoEscape("token", this.getToken());

        var response = req.execute(); // Execute the REST request
        var responseBody = response.getBody(); // Read the RESPONSE
        var httpStatus = response.getStatusCode(); // Read the RESPONSE status Code
        gs.info(logName + " Response Status: " + httpStatus);
        if (httpStatus == 200) {
            
            var userList = JSON.parse(responseBody).list;
            userList.forEach((user) => {
                var gr = new GlideRecord("x_1131046_aa_man_0_users");
                gr.addQuery('user_id', user.id);
                gr.query();
                if (!gr.hasNext()) {
                    gs.info(logName + "User doesn't exists. Adding it." + user.id);
                    gr.initialize();
                    gr.setValue("user_id", user.id);
                    gr.setValue("username", user.username);
                    gr.setValue("first_name", user.firstName);
                    gr.setValue("last_name", user.lastName);
                    gr.setValue("mail_id", user.email);
                    gr.setValue("environment", this.environment);
                    gr.setValue("enable_auto_login", user.enableAutoLogin);

                    if (user.roles.length > 0) {
                        var tmpRoles = [];
                        user.roles.forEach((role) => {
                            tmpRoles.push(role.id);
                        });
                        var roles = this.fetchAllSysIDFromGivenList('x_1131046_aa_man_0_roles', 'id', tmpRoles);
                        gr.setValue("roles", roles);
                    }

                    if (user.licenseFeatures.length > 0) {
                        var tmpLicenses = [];
                        user.licenseFeatures.forEach( (license) => {
                            tmpLicenses.push(license);
                        });
                        var licenses = this.fetchAllSysIDFromGivenList('x_1131046_aa_man_0_licenses', 'name', tmpLicenses);
                        gr.setValue("licenses", licenses);
                    }
                    gr.insert();
                }
            });
        } else {
            gs.error(logName + " Error Occurred. " + responseBody);
        }
    },

    makeReq: function (method) {
        return new sn_ws.RESTMessageV2(this.restSrc, method);
    },

    /**
     * @param {string} userID - id of the user which was received after user has been created.
     * @param {list} roles - list of roles IDs.
     * @return {json} result - result will have keys i.e. isUpdated[bool] - if the roles are updated to AA, it will be true, else false and 
     * msg[string] - if unable to update roles[isUpdated=false], then msg will holds the error message
     */
    updateUserData: function (userData) {
        var logName = this.log + "UpdateRoles >> ";
        var endpoint = this.endpoint + "v2/usermanagement/roles/list";
        var result = {};

        try {
            var tmpRoles = userData.roleIDs.split(",");
            var roles = [];
            tmpRoles.forEach((id) =>{
                roles.push(Number(id));
            });

            gs.info(logName + " Received a request to update roles for the user id: " + userData.userID + ", mailID: " + userData.mailID + " and roles are " + JSON.stringify(roles));

            //Initialize the required REST Message
            var req = this.makeReq('UpdateUserRoles');
            req.setStringParameterNoEscape("endpoint", endpoint);
            req.setStringParameterNoEscape("authorization", this.getToken());
            req.setStringParameterNoEscape('id', userData.userID);
            req.setStringParameterNoEscape('roleIDs', JSON.stringify(roles));
            req.setStringParameterNoEscape('mailID', JSON.stringify(userData.mailID));
            req.setStringParameterNoEscape('firstName', JSON.stringify(userData.firstName));
            req.setStringParameterNoEscape('lastName', JSON.stringify(userData.lastName));
            var response = req.execute();
            var responseBody = response.getBody();
            var httpStatus = response.getStatusCode();
            gs.info(logName + "Result - HTTP status Code: " + httpStatus);
            var parsed = JSON.parse(responseBody);
            if (httpStatus == 200) {
                // roles updated successfully
                result.isUpdated = true;
            } else {
                //Failed to update
                result.isUpdated = false;
                result.msg = parsed.message;
                gs.error(logName + "FAILED | Reason is " + parsed.message);
            }
        } catch (e) {
            gs.error(logName + "Exception: " + e);
            result.isUpdated = false;
            result.msg = "An error occurred while updating the user.";
        }
        return result;
    }
};]]></script>
        <sys_class_name>sys_script_include</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2024-02-06 14:14:59</sys_created_on>
        <sys_id>8139373793c0021030ae7c5efaba10fa</sys_id>
        <sys_mod_count>25</sys_mod_count>
        <sys_name>AutomationAnywhere_API</sys_name>
        <sys_package display_value="AA Management" source="x_1131046_aa_man_0">7630a7f79340021030ae7c5efaba105f</sys_package>
        <sys_policy>read</sys_policy>
        <sys_scope display_value="AA Management">7630a7f79340021030ae7c5efaba105f</sys_scope>
        <sys_update_name>sys_script_include_8139373793c0021030ae7c5efaba10fa</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2024-02-13 15:22:49</sys_updated_on>
    </sys_script_include>
    <sys_update_version action="INSERT_OR_UPDATE">
        <action>DELETE</action>
        <application display_value="AA Management">7630a7f79340021030ae7c5efaba105f</application>
        <file_path/>
        <instance_id>3d112a36db4337449df22f17d4961918</instance_id>
        <instance_name>dev90973</instance_name>
        <name>sys_script_include_8139373793c0021030ae7c5efaba10fa</name>
        <payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update table="sys_script_include"&gt;&lt;sys_script_include action="INSERT_OR_UPDATE"&gt;&lt;access&gt;package_private&lt;/access&gt;&lt;active&gt;true&lt;/active&gt;&lt;api_name&gt;x_1131046_aa_man_0.AutomationAnywhere_API&lt;/api_name&gt;&lt;caller_access/&gt;&lt;client_callable&gt;false&lt;/client_callable&gt;&lt;description&gt;Provides methods to interact with Automation Anywhere&lt;/description&gt;&lt;name&gt;AutomationAnywhere_API&lt;/name&gt;&lt;script&gt;&lt;![CDATA[var AutomationAnywhere_API = Class.create();
AutomationAnywhere_API.prototype = {
    initialize: function (defaultPass = "") {
        this.defaultPass = defaultPass;
    },
    type: 'AutomationAnywhere_API',
    restSrc: 'x_1131046_aa_man_0.AA_API',
    log: "SI | AutomationAnywhere_API | ",
    endpoint: "https://merck-dev.my.automationanywhere.digital/",
    environment: "DEV",

    /**
     * @param {json} user - user json should contains keys i.e 
     * firstName[string],lastName[string],mailId[string],uID[string],roles[list] - list containing role IDs(NOT NAME).
     * @return {json} result - result will have keys i.e. 
     * isCreated[bool] - if the user is created, it will be true, else false
     * id[number] - if isCreated is true, then it will contain id of the user and 
     * msg[string] - if user creation failed[isCreated=false], then msg will holds the error message.
     */
    createUser: function (user) {
        var logName = this.log + "CreateUser &gt;&gt; ";
        var endpoint = this.endpoint + "v2/usermanagement/users";
        var result = {};

        gs.info(logName + " Received a request to Create a New user with details: " + JSON.stringify(user));

        try {
            var tmpRoles = user.roleIDs.split(","),
                tmpLicenses = user.licenses.split(",");

            var roles = [],
                licenses = [];
            // tmpRoles.forEach((id) =&gt; roles.push({"id": id}));

            tmpRoles.forEach((id) =&gt; roles.push(Number(id)));

            tmpLicenses.forEach((name) =&gt; licenses.push(name));

            //Initialize the required REST Message
            var req = this.makeReq('CreateUser');
            req.setStringParameterNoEscape("endpoint", endpoint);
            req.setStringParameterNoEscape("authorization", this.getToken());
            req.setStringParameterNoEscape('firstName', user.firstName);
            req.setStringParameterNoEscape('lastName', user.lastName);
            req.setStringParameterNoEscape('mailID', user.mailID);
            req.setStringParameterNoEscape('pass', this.defaultPass);
            req.setStringParameterNoEscape('userName', user.uID);
            req.setStringParameterNoEscape('roles', roles);
            req.setStringParameterNoEscape('licenses', licenses);
            gs.info(logName + " Creating User...");

            var response = req.execute();
            var responseBody = response.getBody();
            var httpStatus = response.getStatusCode();
            gs.info(logName + "Result - HTTP status Code: " + httpStatus);
            var parsed = JSON.parse(responseBody);
            if (httpStatus == 201) {
                // User Created Successfully
                result.isCreated = true;
                gs.info(logName + "SUCCESS | New ID is " + parsed.id);
                result.id = parsed.id;
            } else {
                //Failed to create user through api
                result.isCreated = false;
                result.msg = parsed.message;
                gs.error(logName + "FAILED | Reason is " + parsed.message);
            }
        } catch (e) {
            gs.error(logName + "Exception: " + e);
            result.isCreated = false;
            result.msg = "An error occurred while creating the user.";
        }
        return result;
    },

    /**
     * @param {string} uID - x_m_uid of the user to check whether it matches with existing uID of user who possessing "id". In order to avoid deletion of other users.
     * @param {string} userID - id of the user which was received after user has been created.
     * @return {json} result - result will have keys i.e. isCreated[bool] - if the user is created, it will be true and msg[string] - if user creation failed, then msg will holds the error message.
     */
    deleteUsr: function (uID, userID) {
        var logName = this.log + "DeleteUsr &gt;&gt; ";
        var endpoint = this.endpoint + "v2/usermanagement/users/";

        if (userID) {
            gs.info(logName + "Checking if user with id " + userID + " exists in AA...");
            var exists = this.getUserByID(userID);
            if (!exists) {
                gs.error(logName + "User doesn't exists in Automation Anywhere.");
                return 1;
            } else {
                if (exists.username.toLowerCase() == uID.toLowerCase()) {
                    gs.error(logName + "Username matched with uID...");
                    endpoint = endpoint + userID;

                    var req = this.makeReq('DeleteUser');
                    req.setStringParameterNoEscape("endpoint", endpoint);
                    req.setStringParameterNoEscape("authorization", this.getToken());
                    var response = req.execute();
                    var responseBody = response.getBody();
                    var httpStatus = response.getStatusCode();
                    gs.info(logName + "SUCCESS | Response Status: " + httpStatus);
                    if (httpStatus == 204)
                        return 0;
                    else {
                        gs.error(logName + "FAILED | Reason is " + responseBody);
                    }
                } else {
                    gs.error(logName + "You are trying to delete user having UID: " + uID + ". But, Username recorded with above ID in AA is " + exists.username);
                    return 1;
                }
            }
        }
    },

    /**
     * @param {string} tableName - tablename from which sysID will be extracted.
     * @param {string} columnName - columnName in which filter will applied.
     * @param {string} columnValue - columnValue
     * @return {string/number} sysID - returns sysID if found, else 0.
     */
    fetchSysID: function (tableName, columnName, columnValue) {
        var gr = new GlideRecord(tableName);
        gr.addQuery(columnName, columnValue);
        gr.query();
        if (gr.next()) {
            gr.next();
            return gr.getUniqueValue();
        } else {
            return 0;
        }
    },

    /**
     * @param {string} tableName - tablename from which sysIDs will be extracted.
     * @param {string} columnName - columnName in which filter will applied.
     * @param {list} valueList - list that contains the ids using which their respective sysId will be extracted from the table
     * @return {string} sysIds - sysIds of respective IDs passed in idList.
     */
    fetchAllSysIDFromGivenList: function (tableName, columnName, valueList) {
        var logName = this.log + "fetchAllSysIDFromGivenList &gt;&gt; ";
        var sysIDs = "";

        gs.info(" Fetching the sys_ids from table: "+ tableName + " under the column: "+columnName);
        valueList.forEach((value) =&gt; {
            var sysID = this.fetchSysID(tableName, columnName, value);
            if (sysID) {
                sysIDs = sysIDs + "," + String(sysID);
            } else {
                gs.info("Sys ID doesn't exists for the value:" + value + "under the column: " + columnName + " in table: " + tableName);
            }
        });

        return sysIDs;
    },

    getToken: function () {
        // API call made to AA to get the TOKEN

        var endpoint = this.endpoint + "v2/authentication";
        var req = this.makeReq('Authentication');
        req.setStringParameterNoEscape("endpoint", endpoint);
        req.setStringParameterNoEscape('api_key', 'L|fJA&gt;l}P@&gt;kyY|W;n]j3vxeJ__aF`hXUr|hG22w');
        req.setStringParameterNoEscape('username', 'X253816');
        var response = req.execute();
        var responseBody = response.getBody();
        var httpStatus = response.getStatusCode();
        if (httpStatus == 200) {
            // Get the Access Token
            return JSON.parse(responseBody).token;
        }
    },

    /**
     * @param {string} id - id of the user which was received after user has been created.
     * @return {json} result - result will contain all the keys that user has configured or assigned after user has been created.
     */
    getUserByID: function (userID) {
        var logName = this.log + "getUserByID &gt;&gt; ";

        // API Call made to AA to get User info by User ID
        if (userID) {
            gs.info(logName + "Checking info for Id: " + userID);
            var endpoint = this.endpoint + "v2/usermanagement/users/" + userID;

            var req = this.makeReq('GetUserByID');
            req.setStringParameterNoEscape("endpoint", endpoint);
            req.setStringParameterNoEscape("authorization", this.getToken());
            req.setStringParameterNoEscape('id', userID);
            var response = req.execute();
            var responseBody = response.getBody();
            var httpStatus = response.getStatusCode();
            gs.info(logName + "Script - Response Status: " + httpStatus);
            if (httpStatus == 404)
                return;
            if (httpStatus == 401)
                return this.getUserByID(userID);
            if (httpStatus == 200)
                return JSON.parse(responseBody);
        }
    },

    insertLicenses: function () {
        // Insert roles into table named "aa_roles". So, to keep updated whenever a new role is created in AA.
        // This method is called for every 6 hours from Scheduled Jobs and add the roles, if the "id" doesn't exists.
        var logName = this.log + "insertLicenses &gt;&gt; ";
        var endpoint = this.endpoint + "v2/license/product/list";

        var req = this.makeReq('GetLicenseList');
        req.setStringParameterNoEscape("endpoint", endpoint);
        req.setStringParameterNoEscape("authorization", this.getToken());
        var response = req.execute();
        var responseBody = response.getBody();
        var httpStatus = response.getStatusCode();
        gs.info(logName + " Response Status: " + httpStatus);
        if (httpStatus == 200) {
            var licenseList = JSON.parse(responseBody).list;
            licenseList.forEach((license) =&gt; {
                if ('feature' in license) {
                    var parent = license.name;
                    var feature = license.feature;
                    var gr = new GlideRecord("x_1131046_aa_man_0_licenses");
                    gr.addQuery('id', feature.id);
                    gr.query();
                    if (!gr.hasNext()) {
                        gs.info(logName + "License doesn't exists. Adding it." + license.id);
                        gr.initialize();
                        gr.setValue('id', feature.id);
                        gr.setValue('name', feature.name);
                        gr.setValue('parent', parent);
                        gr.setValue('available_count', feature.availableCount);
                        gr.setValue('purchased_count', feature.purchasedCount);
                        gr.setValue('used_in_this_cr', feature.usedCountByThisCr);
                        gr.setValue('used_in_other_cr', feature.usedCountByAllCr);
                        gr.insert();
                    }
                }
            });
        } else {
            gs.error(logName + " Error Occurred. " + responseBody);
        }
    },

    insertRoles: function () {
        // Insert roles into table named "aa_roles". So, to keep updated whenever a new role is created in AA.
        // This method is called for every 6 hours from Scheduled Jobs and add the roles, if the "id" doesn't exists.
        var logName = this.log + "insertRoles &gt;&gt; ";
        var endpoint = this.endpoint + "v2/usermanagement/roles/list";

        var req = this.makeReq('FetchRoles'); // Create REST Request
        req.setStringParameterNoEscape("endpoint", endpoint);
        req.setStringParameterNoEscape("token", this.getToken()); // Set the Variable value
        var response = req.execute(); // Execute the REST request
        var responseBody = response.getBody(); // Read the RESPONSE
        var httpStatus = response.getStatusCode(); // Read the RESPONSE status Code
        gs.info(logName + " Response Status: " + httpStatus);
        if (httpStatus == 200) {
            var rolesList = JSON.parse(responseBody).list;
            rolesList.forEach((role) =&gt; {
                var gr = new GlideRecord("x_snc_accessprov_0_aa_roles");
                gr.addQuery('id', role.id);
                gr.query();
                if (!gr.hasNext()) {
                    gs.info(logName + "Role doesn't exists. Adding it." + role.id);
                    gr.initialize();
                    gr.setValue("id", role.id);
                    gr.setValue("name", role.name);
                    gr.setValue("description", role.description);
                    gr.insert();
                }
            });
        } else {
            gs.error(logName + " Error Occurred. " + responseBody);
        }
    },

    insertUsers: function () {
        var logName = this.log + "insertUsers &gt;&gt; ";
        var endpoint = this.endpoint + "v2/usermanagement/users/list";
        gs.info(logName + "Endpoint: "+endpoint);

        var req = this.makeReq('FetchUsers'); // Create REST Request
        req.setStringParameterNoEscape("endpoint", endpoint);
        req.setStringParameterNoEscape("token", this.getToken());

        var response = req.execute(); // Execute the REST request
        var responseBody = response.getBody(); // Read the RESPONSE
        var httpStatus = response.getStatusCode(); // Read the RESPONSE status Code
        gs.info(logName + " Response Status: " + httpStatus);
        if (httpStatus == 200) {
            
            var userList = JSON.parse(responseBody).list;
            userList.forEach((user) =&gt; {
                var gr = new GlideRecord("x_1131046_aa_man_0_users");
                gr.addQuery('user_id', user.id);
                gr.query();
                if (!gr.hasNext()) {
                    gs.info(logName + "User doesn't exists. Adding it." + user.id);
                    gr.initialize();
                    gr.setValue("user_id", user.id);
                    gr.setValue("username", user.username);
                    gr.setValue("first_name", user.firstName);
                    gr.setValue("last_name", user.lastName);
                    gr.setValue("mail_id", user.email);
                    gr.setValue("environment", this.environment);
                    gr.setValue("enable_auto_login", user.enableAutoLogin);

                    if (user.roles.length &gt; 0) {
                        var tmpRoles = [];
                        user.roles.forEach((role) =&gt; {
                            tmpRoles.push(role.id);
                        });
                        var roles = this.fetchAllSysIDFromGivenList('x_1131046_aa_man_0_roles', 'id', tmpRoles);
                        gr.setValue("roles", roles);
                    }

                    if (user.licenseFeatures.length &gt; 0) {
                        var tmpLicenses = [];
                        user.licenseFeatures.forEach( (license) =&gt; {
                            tmpLicenses.push(license);
                        });
                        var licenses = this.fetchAllSysIDFromGivenList('x_1131046_aa_man_0_licenses', 'name', tmpLicenses);
                        gr.setValue("licenses", licenses);
                    }
                    gr.insert();
                }
            });
        } else {
            gs.error(logName + " Error Occurred. " + responseBody);
        }
    },

    makeReq: function (method) {
        return new sn_ws.RESTMessageV2(this.restSrc, method);
    },

    /**
     * @param {string} userID - id of the user which was received after user has been created.
     * @param {list} roles - list of roles IDs.
     * @return {json} result - result will have keys i.e. isUpdated[bool] - if the roles are updated to AA, it will be true, else false and 
     * msg[string] - if unable to update roles[isUpdated=false], then msg will holds the error message
     */
    updateUserData: function (userData) {
        var logName = this.log + "UpdateRoles &gt;&gt; ";
        var endpoint = this.endpoint + "v2/usermanagement/roles/list";
        var result = {};

        try {
            var tmpRoles = userData.roleIDs.split(",");
            var roles = [];
            tmpRoles.forEach((id) =&gt;{
                roles.push(Number(id));
            });

            gs.info(logName + " Received a request to update roles for the user id: " + userData.userID + ", mailID: " + userData.mailID + " and roles are " + JSON.stringify(roles));

            //Initialize the required REST Message
            var req = this.makeReq('UpdateUserRoles');
            req.setStringParameterNoEscape("endpoint", endpoint);
            req.setStringParameterNoEscape("authorization", this.getToken());
            req.setStringParameterNoEscape('id', userData.userID);
            req.setStringParameterNoEscape('roleIDs', JSON.stringify(roles));
            req.setStringParameterNoEscape('mailID', JSON.stringify(userData.mailID));
            req.setStringParameterNoEscape('firstName', JSON.stringify(userData.firstName));
            req.setStringParameterNoEscape('lastName', JSON.stringify(userData.lastName));
            var response = req.execute();
            var responseBody = response.getBody();
            var httpStatus = response.getStatusCode();
            gs.info(logName + "Result - HTTP status Code: " + httpStatus);
            var parsed = JSON.parse(responseBody);
            if (httpStatus == 200) {
                // roles updated successfully
                result.isUpdated = true;
            } else {
                //Failed to update
                result.isUpdated = false;
                result.msg = parsed.message;
                gs.error(logName + "FAILED | Reason is " + parsed.message);
            }
        } catch (e) {
            gs.error(logName + "Exception: " + e);
            result.isUpdated = false;
            result.msg = "An error occurred while updating the user.";
        }
        return result;
    }
};]]&gt;&lt;/script&gt;&lt;sys_class_name&gt;sys_script_include&lt;/sys_class_name&gt;&lt;sys_created_by&gt;admin&lt;/sys_created_by&gt;&lt;sys_created_on&gt;2024-02-06 14:14:59&lt;/sys_created_on&gt;&lt;sys_id&gt;8139373793c0021030ae7c5efaba10fa&lt;/sys_id&gt;&lt;sys_mod_count&gt;25&lt;/sys_mod_count&gt;&lt;sys_name&gt;AutomationAnywhere_API&lt;/sys_name&gt;&lt;sys_package display_value="AA Management" source="x_1131046_aa_man_0"&gt;7630a7f79340021030ae7c5efaba105f&lt;/sys_package&gt;&lt;sys_policy&gt;read&lt;/sys_policy&gt;&lt;sys_scope display_value="AA Management"&gt;7630a7f79340021030ae7c5efaba105f&lt;/sys_scope&gt;&lt;sys_update_name&gt;sys_script_include_8139373793c0021030ae7c5efaba10fa&lt;/sys_update_name&gt;&lt;sys_updated_by&gt;admin&lt;/sys_updated_by&gt;&lt;sys_updated_on&gt;2024-02-13 15:22:49&lt;/sys_updated_on&gt;&lt;/sys_script_include&gt;&lt;/record_update&gt;</payload>
        <payload_hash>1848442995</payload_hash>
        <record_name>AutomationAnywhere_API</record_name>
        <reverted_from/>
        <source>84b0d202075402101808fe4f7c1ed0e9</source>
        <source_table>sys_update_set</source_table>
        <state>previous</state>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2024-02-13 15:22:49</sys_created_on>
        <sys_id>8e2c4c5e079c02101808fe4f7c1ed0d1</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_recorded_at>18da31046000000001</sys_recorded_at>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2024-02-13 15:22:49</sys_updated_on>
        <type>Script Include</type>
        <update_guid>062c4c5ea39c021052cce467d91874d1</update_guid>
        <update_guid_history>062c4c5ea39c021052cce467d91874d1:1848442995,06da009aed9c021057e1748b36121c37:-2037526085,1d29009aad9c0210be90227f201565c6:-1133690801,69a84c5a8d9c0210f59311edc40b01cd:810858315,4b58c45acd9c02108fa25b2c2c61e162:1007311691,5f284c1ade9c0210166ecb9232023cf7:1863848694,b6b704d60a9c02107076351d715073dd:182156705,971744d6229c021000405a49e62904ee:1265390558,cca604d62a9c0210242dd69f3477f22a:173660726,6f954056d89c02109103d75146a33156:-1912432302,16d40c16ec9c02102d71b1376a18064d:1907240946,ee8404527d9c02103ff8c3f8f7867094:-2126200628,1de1cc12759c0210506dd91ad4a80c74:520102374,b6c0c0de935c0210a068d33f714ec863:-983831614,0730c89ef35c0210d460016fe0bde9cb:1224005132,cefef78a1a5c0210097ce6db7d68ede1:1858412395,cfdee68affd40210bb16ef6a66020c5c:-1911170884,77bf0e8248540210e6d837b059c99eff:998783790</update_guid_history>
    </sys_update_version>
    <sys_metadata_delete action="INSERT_OR_UPDATE">
        <sys_audit_delete/>
        <sys_class_name>sys_metadata_delete</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2024-02-14 13:50:18</sys_created_on>
        <sys_db_object display_value="" name="sys_script_include">sys_script_include</sys_db_object>
        <sys_id>0be5b7c6e1384364b4ca14964e9982a9</sys_id>
        <sys_metadata>8139373793c0021030ae7c5efaba10fa</sys_metadata>
        <sys_mod_count>0</sys_mod_count>
        <sys_name>AutomationAnywhere_API</sys_name>
        <sys_package display_value="AA Management" source="x_1131046_aa_man_0">7630a7f79340021030ae7c5efaba105f</sys_package>
        <sys_parent/>
        <sys_policy>read</sys_policy>
        <sys_scope display_value="AA Management">7630a7f79340021030ae7c5efaba105f</sys_scope>
        <sys_scope_delete display_value="">2be73dab4eaf4736a09a5739e1636be9</sys_scope_delete>
        <sys_update_name>sys_script_include_8139373793c0021030ae7c5efaba10fa</sys_update_name>
        <sys_update_version display_value="sys_script_include_8139373793c0021030ae7c5efaba10fa">8e2c4c5e079c02101808fe4f7c1ed0d1</sys_update_version>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2024-02-14 13:50:18</sys_updated_on>
    </sys_metadata_delete>
</record_update>
