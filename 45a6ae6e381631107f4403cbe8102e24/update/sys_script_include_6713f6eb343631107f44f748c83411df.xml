<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_script_include">
    <sys_script_include action="INSERT_OR_UPDATE">
        <access>package_private</access>
        <active>true</active>
        <api_name>x_snc_accessprov_0.AutomationAnywhereFunctions</api_name>
        <caller_access/>
        <client_callable>false</client_callable>
        <description>Provide functions to interact with AA to create the user, to fetch the user's id etc.</description>
        <name>AutomationAnywhereFunctions</name>
        <script><![CDATA[var AutomationAnywhereFunctions = Class.create();
AutomationAnywhereFunctions.prototype = {
    initialize: function() {},
    type: 'AutomationAnywhereFunctions',
    restSrc: 'x_snc_accessprov_0.AA Authentication',
    pass: "abc@123123",
    requestTable: new GlideRecord('x_snc_accessprov_0_aa_request_access'),
	members: new GlideRecord('sys_user_grmember'),

    CreateOrRejectUser: function(createOrReject, user) {
        var sts = "pending";
        if (createOrReject == "create") {
            var result = this.CreateUser(user);
            if (result.isCreated)
                sts = "granted";
            return result;
        }
        if (createOrReject == "reject") {
            sts = "rejected";
            this.RejectUser(user);
        }
        var details = {
            'sts': sts,
            'name': user.name,
            'pass': this.pass,
            'reason': user.rejectReason || ""
        };

        gs.info("SctiptInclude: Calling UserCreationOrRejection Event...");
        gs.eventQueue(name = 'x_snc_accessprov_0.send_mail_to_user', record = this.requestTable, parm1 = user.email, parm2 = JSON.stringify(details));
        gs.info("SctiptInclude: Event Created");
    },

    CreateUser: function(userInfo) {
        var log_name = "SCRIPT- CreateUser: ";
        // Get Access Token
        var tkn = this.GetToken();

        //Initialize the required REST Message
        var req = new sn_ws.RESTMessageV2(this.restSrc, 'Create User');
        req.setRequestHeader("x-authorization", tkn);
        req.setStringParameterNoEscape('firstName', userInfo.fname);
        req.setStringParameterNoEscape('lastName', userInfo.lname);
        req.setStringParameterNoEscape('mailId', userInfo.email);
        req.setStringParameterNoEscape('pass', this.pass);
        req.setStringParameterNoEscape('userName', userInfo.uid);
        req.setStringParameterNoEscape('id', '224');

        gs.info(log_name + "User Creation | Creating User...");

        var response = req.execute();
        var responseBody = response.getBody();
        var httpStatus = response.getStatusCode();
        gs.info(log_name + "User Creation | Result - HTTP status Code: " + httpStatus);
        var parsed = JSON.parse(responseBody);
        var result = {};
        if (httpStatus == 201) {
            // User Created Successfully
            result.isCreated = true;
            gs.info(log_name + "User Creation | SUCCESS | New ID is " + parsed.id);
            this.requestTable.addQuery('sys_id', userInfo.sysId);
            this.requestTable.query();
            if (this.requestTable.next()) {
                this.requestTable.setValue('id', parsed.id);
                this.requestTable.setValue('status', "granted");
                this.requestTable.update('updated ID of record: ' + userInfo.sysId);
            }
        } else {
            //Failed to create user through api
            result.isCreated = false;
            result.msg = parsed.message;
            gs.error(log_name + "User Creation | FAILED | Reason is " + parsed.message);
        }

        return result;
    },

    FetchUsersOfGroup: function(sysId) {
        this.members.addQuery('group', sysId);
        this.members.query();
        var users = [];
        while (this.members.next()) {
            users.push(this.members.user.email.toString());
        }
		return users;
    },

    GetToken: function() {
        var r = new sn_ws.RESTMessageV2('x_snc_accessprov_0.AA Authentication', 'Default Post');
        r.setStringParameterNoEscape('api_key', 'ii5_V`~@t<3oE|0h1XIQqIUc{|yWotEoK3Oryz^n');
        r.setStringParameterNoEscape('username', 'X253816');
        var response = r.execute();
        var responseBody = response.getBody();
        var httpStatus = response.getStatusCode();

        if (httpStatus == 200) {
            // Get the Access Token
            return JSON.parse(responseBody).token;
        }
    },

    GetUserByID: function(id) {
        if (id) {
            gs.info("Checking info for Id: " + id);
            var token = this.GetToken();
            var req = new sn_ws.RESTMessageV2(this.restSrc, 'Get User by ID');
            req.setRequestHeader("x-authorization", token);
            req.setStringParameterNoEscape('uid', id);
            var response = req.execute();
            var responseBody = response.getBody();
            var httpStatus = response.getStatusCode();
            gs.info("Script - Response Status: " + httpStatus);

            if (httpStatus == 401) {
                return this.GetUserByID(id);
            }
            if (httpStatus == 200) {
                //return JSON.stringify(responseBody);
                return JSON.parse(responseBody);
            }
        }
    },

    InformAdminOnRequest: function(userInfo) {
//         var userTable = new GlideRecord('sys_user');
//         // fetch the user details who have admin role
//         userTable.addQuery('roles', 'x_snc_accessprov_0.admin');
//         userTable.query();
//         var mailList = "";
//         while (userTable.next())
//             mailList += userTable.getValue('mailId') + ";";
		var adminMailList = this.FetchUsersOfGroup('333afe4c1c1731107f44d85edddcec9e');
		gs.info("Admin List: "+adminMailList);
        gs.info("SctiptInclude: Calling Inform Admin Event...");
		
		var details = {"userInfo":userInfo,'adminMailList': adminMailList};
		
		gs.eventQueue(name = 'x_snc_accessprov_0.inform_admin', record = this.members, parm1 = "yashwanthgowda.hr@external.merckgroup.com", parm2 = JSON.stringify(details));
        gs.info("SctiptInclude: Event Created");
    },

    NotifyUserCreation: function(sts, name, to, reason, isNew) {
        var sub, body, content, header = 'Hi ' + name + ',\n\n',
            footer = '\n\nThanks & Regards,\nServiceNow';
        sub = 'AutomationAnywhere Access Request Notification | ';
        if (isNew) {
            sub += 'Requested';
            content = 'Your request has been placed. Please wait for the admin approval.';
        } else {
            if (sts == 0) {
                sub += 'Approved';
                content = 'Your request has been approved by Admin.\nDefault Password is ' + this.pass;
            } else {
                sub += 'Rejected';
                if (reason)
                    content = 'Your request has been rejected by Admin. Reason: ' + reason;
                else
                    content = 'Your request has been rejected by Admin.';
            }
        }
        body = header + content + footer;

        // Create a GlideEmailOutbound object
        var email = new GlideEmailOutbound();
        //mail.addRecipient(to);
        email.addAddress('cc', to);
        email.setSubject(sub);
        email.setBody(body);

        // Save and send the email
        var emailSysId = email.save();

        // Optionally, you can check for errors
        if (email.error()) {
            gs.error('Email sending failed: ' + email.errorMsg());
        } else {
            gs.info('Email sent successfully.');
        }

    },

    RejectUser: function(userInfo) {
        gs.info("Rejecting request");
        this.requestTable.addQuery('sys_id', userInfo.sysId);
        this.requestTable.query();
        if (this.requestTable.next()) {
            this.requestTable.setValue('status', 'rejected');
            this.requestTable.update('updated status of record: ' + userInfo.sysId + ' to REJECTED');
        }
    },

};]]></script>
        <sys_class_name>sys_script_include</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2023-12-05 11:15:29</sys_created_on>
        <sys_id>6713f6eb343631107f44f748c83411df</sys_id>
        <sys_name>AutomationAnywhereFunctions</sys_name>
        <sys_package display_value="AccessProvider" source="x_snc_accessprov_0">45a6ae6e381631107f4403cbe8102e24</sys_package>
        <sys_policy>read</sys_policy>
        <sys_scope display_value="AccessProvider">45a6ae6e381631107f4403cbe8102e24</sys_scope>
        <sys_update_name>sys_script_include_6713f6eb343631107f44f748c83411df</sys_update_name>
    </sys_script_include>
</record_update>
