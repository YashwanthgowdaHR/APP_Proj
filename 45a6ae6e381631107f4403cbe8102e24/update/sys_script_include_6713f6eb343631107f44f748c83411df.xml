<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_script_include">
    <sys_script_include action="INSERT_OR_UPDATE">
        <access>package_private</access>
        <active>true</active>
        <api_name>x_snc_accessprov_0.AutomationAnywhere_APIs</api_name>
        <caller_access/>
        <client_callable>false</client_callable>
        <description>Provide functions to interact with AA to create the user, to fetch the user's id etc.</description>
        <name>AutomationAnywhere_APIs</name>
        <script><![CDATA[var AutomationAnywhere_APIs = Class.create(); 
AutomationAnywhere_APIs.prototype = {
    initialize: function(defaultPass) {
        this.defaultPass = defaultPass;
        this.log = "SI | AutomationAnywhere_APIs | ";
    },
    type: 'AutomationAnywhere_APIs',
    restSrc: 'x_snc_accessprov_0.AA-API',

    /**
     * Foo takes any argument.
     * The return value is 'baz' in all cases.
     * @param {json} user - user json should contains keys i.e 
     * firstName[string],lastName[string],mailId[string],uID[string],roles[string] - roles containing role id separated by comma.
     * @return {json} result - result will have keys i.e. 
     * isCreated[bool] - if the user is created, it will be true,
     * id[number] - if isCreated is true, then it will contain id of the user and 
     * msg[string] - if user creation failed, then msg will holds the error message.
     */
    createUsr: function(user) {
        var logName = this.log + "CreateUser | ";
        var result = {};

        try {
			gs.info(logName+" Received a request to Create a New user with details: "+JSON.stringify(user));
            // Get Access Token
            var tkn = this.getToken();
            var tmpRoles = user.roleIds.split(",");
            var roles = [];
            tmpRoles.forEach(function(id) {
                roles.push({
                    "id": id
                });
            });

            //Initialize the required REST Message
            var req = new sn_ws.RESTMessageV2(this.restSrc, 'Create User');
            req.setStringParameterNoEscape("authorization", tkn);
            req.setStringParameterNoEscape('firstName', user.firstName);
            req.setStringParameterNoEscape('lastName', user.lastName);
            req.setStringParameterNoEscape('mailID', user.mailID);
            req.setStringParameterNoEscape('pass', this.defaultPass);
            req.setStringParameterNoEscape('userName', user.uID);
            req.setStringParameterNoEscape('roles', JSON.stringify(roles));

            gs.info(logName + "User Creation | Creating User...");

            var response = req.execute();
            var responseBody = response.getBody();
            var httpStatus = response.getStatusCode();
            gs.info(logName + "User Creation | Result - HTTP status Code: " + httpStatus);
            var parsed = JSON.parse(responseBody);
            if (httpStatus == 201) {
                // User Created Successfully
                result.isCreated = true;
                gs.info(logName + "User Creation | SUCCESS | New ID is " + parsed.id);
                result.id = parsed.id;

            } else {
                //Failed to create user through api
                result.isCreated = false;
                result.msg = parsed.message;
                gs.error(logName + "User Creation | FAILED | Reason is " + parsed.message);
            }
        } catch (e) {
            gs.error(logName + "User Creation | Exception: " + e);
            result.isCreated = false;
            result.msg = "An error occurred while creating the user.";
        }
        return result;
    },
    /**
     * Foo takes any argument.
     * The return value is 'baz' in all cases.
     * @param {string} id - id of the user which was received after user has been created.
     * @return {json} result - result will have keys i.e. isCreated[bool] - if the user is created, it will be true and msg[string] - if user creation failed, then msg will holds the error message.
     */
    deleteUsr: function(uID, id) {
        var logName = this.log + "DeleteUser | ";
        if (id) {
            gs.info("Checking if user with id " + id + "exists in AA...");
            var exists = this.getUserByID(id);
            if (!exists) {
                gs.error(logName + "User doesn't exists in Automation Anywhere.");
                return 1;
            } else {
                if (exists.username == uID) {
                    var token = this.getToken();
                    var req = new sn_ws.RESTMessageV2(this.restSrc, 'DeleteUser');
                    req.setStringParameterNoEscape("authorization", token);
                    req.setStringParameterNoEscape('id', id);
                    var response = req.execute();
                    var responseBody = response.getBody();
                    var httpStatus = response.getStatusCode();
                    gs.info(logName + "Response Status: " + httpStatus);

                    if (httpStatus == 204)
                        return 0;
                } else {
                    gs.error(logName + "you are trying to delete another user having UID:" + uID);
                    return 1;
                }

            }
        }
    },

    getToken: function() {
        // API call made to AA to get the TOKEN
        var r = new sn_ws.RESTMessageV2(this.restSrc, 'Default Post');
        r.setStringParameterNoEscape('api_key', 'ii5_V`~@t<3oE|0h1XIQqIUc{|yWotEoK3Oryz^n');
        r.setStringParameterNoEscape('username', 'X253816');
        var response = r.execute();
        var responseBody = response.getBody();
        var httpStatus = response.getStatusCode();

        if (httpStatus == 200) {
            // Get the Access Token
            return JSON.parse(responseBody).token;
        }
    },

    getUserByID: function(id) {
        // API Call made to AA to get User info by User ID
        if (id) {
            gs.info("Checking info for Id: " + id);
            var token = this.getToken();
            var req = new sn_ws.RESTMessageV2(this.restSrc, 'Get User by ID');
            req.setStringParameterNoEscape("authorization", token);
            req.setStringParameterNoEscape('id', id);
            var response = req.execute();
            var responseBody = response.getBody();
            var httpStatus = response.getStatusCode();
            gs.info("Script - Response Status: " + httpStatus);

            if (httpStatus == 404)
                return;

            if (httpStatus == 401)
                return this.getUserByID(id);

            if (httpStatus == 200)
                return JSON.parse(responseBody);
        }
    },
};]]></script>
        <sys_class_name>sys_script_include</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2023-12-05 11:15:29</sys_created_on>
        <sys_id>6713f6eb343631107f44f748c83411df</sys_id>
        <sys_name>AutomationAnywhere_APIs</sys_name>
        <sys_package display_value="AccessProvider" source="x_snc_accessprov_0">45a6ae6e381631107f4403cbe8102e24</sys_package>
        <sys_policy>read</sys_policy>
        <sys_scope display_value="AccessProvider">45a6ae6e381631107f4403cbe8102e24</sys_scope>
        <sys_update_name>sys_script_include_6713f6eb343631107f44f748c83411df</sys_update_name>
    </sys_script_include>
</record_update>
