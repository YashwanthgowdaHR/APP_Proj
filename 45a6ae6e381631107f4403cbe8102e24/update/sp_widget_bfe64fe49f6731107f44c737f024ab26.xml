<?xml version="1.0" encoding="UTF-8"?><record_update table="sp_widget">
    <sp_widget action="INSERT_OR_UPDATE">
        <category>custom</category>
        <client_script><![CDATA[api.controller=function() {
  /* widget controller */
  var c = this;
};]]></client_script>
        <controller_as>c</controller_as>
        <css/>
        <data_table>sp_instance</data_table>
        <demo_data/>
        <description>Display the user info in new window and one can update the existing data</description>
        <docs/>
        <field_list/>
        <has_preview>false</has_preview>
        <id>tsp_admin_display_user_info</id>
        <internal>false</internal>
        <link><![CDATA[function link(scope, element, attrs, controller) {
  
}]]></link>
        <name>UserInfo</name>
        <option_schema/>
        <public>false</public>
        <roles>x_snc_accessprov_0.admin</roles>
        <script><![CDATA[// Widget script to display user profile information

(function() {
    var profileWidget = {

        initialize: function (/*$scope, $rootScope, $location*/) {
            // Load user profile data
            this.loadUserProfile();
        },

        loadUserProfile: function () {
            var userSysId = g_user.userID;
            var grUser = new GlideRecord('sys_user');
            
            if (grUser.get(userSysId)) {
                // Fetch user details
                var name = grUser.getDisplayValue(); // Assuming Name is a string field
                var email = grUser.email.getDisplayValue(); // Change 'email' to the correct field name
                var roles = this.getUserRoles(userSysId);
                var environment = grUser.environment.getDisplayValue(); // Change 'environment' to the correct field name

                // Set data in the widget scope
                this.$scope.userName = name;
                this.$scope.userEmail = email;
                this.$scope.userRoles = roles;
                this.$scope.userEnvironment = environment;
            }
        },

        getUserRoles: function (userSysId) {
            var roles = [];
            var grUserRoles = new GlideRecord('sys_user_has_role');
            grUserRoles.addQuery('user', userSysId);
            grUserRoles.query();

            while (grUserRoles.next()) {
                var role = grUserRoles.role.getDisplayValue();
                roles.push(role);
            }

            return roles;
        }
    };

    angular.module('sn.widgets').directive('userProfileWidget', function () {
        return {
            restrict: 'E',
            replace: true,
            templateUrl: 'user_profile_widget_template.xml', // Create an XML template for your widget
            controller: function($scope) {
                profileWidget.$scope = $scope;
                profileWidget.initialize();
            }
        };
    });
})();]]></script>
        <servicenow>false</servicenow>
        <sys_class_name>sp_widget</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2024-01-02 12:41:22</sys_created_on>
        <sys_id>bfe64fe49f6731107f44c737f024ab26</sys_id>
        <sys_name>UserInfo</sys_name>
        <sys_package display_value="AccessProvider" source="x_snc_accessprov_0">45a6ae6e381631107f4403cbe8102e24</sys_package>
        <sys_policy/>
        <sys_scope display_value="AccessProvider">45a6ae6e381631107f4403cbe8102e24</sys_scope>
        <sys_update_name>sp_widget_bfe64fe49f6731107f44c737f024ab26</sys_update_name>
        <template><![CDATA[<div>
    <h3>{{ userName }}</h3>
    <p>Email: {{ userEmail }}</p>
    <p>Roles: {{ userRoles.join(', ') }}</p>
    <p>Environment: {{ userEnvironment }}</p>
</div>]]></template>
    </sp_widget>
</record_update>
