<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_script_include">
    <sys_script_include action="INSERT_OR_UPDATE">
        <access>package_private</access>
        <active>true</active>
        <api_name>x_snc_accessprov_0.APCommonFunctions</api_name>
        <caller_access/>
        <client_callable>false</client_callable>
        <description/>
        <name>APCommonFunctions</name>
        <script><![CDATA[var APCommonFunctions = Class.create();

APCommonFunctions.prototype = {
    initialize: function() {
        this.defaultPass = "abc@123123";
        this.log = "SI | APCommonFunctions | ";
    },
    type: 'APCommonFunctions',
    adminGroupID: 'fa580ca147f73110b7ed2398c26d43ac',
    event1: 'x_snc_accessprov_0.send_mail_to_user',
    event2: 'x_snc_accessprov_0.inform_admin',
    AA_API: new AutomationAnywhere_APIs(this.defaultPass),
    CmnMethods: new CommonMethods(),
    groupMemberGR: new GlideRecord('sys_user_grmember'),
    reqAccessGR: new GlideRecord('x_snc_accessprov_0_aa_request_access'),

    addEvent: function(event, rec, p1, p2) {
        gs.info(this.log + " addEvent >> " + event);
        gs.eventQueue(name = event, record = rec, parm1 = p1, parm2 = p2);
    },

    addAndApproveReq: function(userData) {
        var logName = this.log + " addAndApproveReq >> ";

        if (!this.isAdmin()) {
            gs.error(logName + " Unknown Access found");
            // Add Mail Notification when someone other than admin tried to access it.
            return;
        }
        var recordSysID = this.insertRecord(userData);
        if (!recordSysID) {
            return {
                isCreated: false,
                msg: "Request exists already."
            };
        }

        var record = userData;
        record.recordSysID = recordSysID;
        record.rolesIDs = this.CmnMethods.getDisplayValueFromRecord(this.reqAccessGR.getTableName(), recordSysID, "roles");

        gs.info(logName + " Sending requests to AA for user creation...");

        var result = this.createUser(record);
        if (result.isCreated) {
            sts = "granted";
            var details = {
                sts: sts,
                name: userData.name,
                pass: this.defaultPass,
                reason: userData.rejectReason || ""
            };
            this.addEvent(this.event1, this.reqAccessGR, userData.mailID, JSON.stringify(details));
        }else{
            this.CmnMethods.deleteRecord(this.reqAccessGR.getTableName(), recordSysID);
        }
        return result;
    },

    approveOrRejectUser: function(action, record) {
        var logName = this.log + "approveOrRejectUser >> ";

        if (!this.isAdmin()) {
            gs.error(logName + " Unknown Access found");
            // Add Mail Notification when someone other than admin tried to access it.
            return;
        }

        var sts = "pending";

        // approve the req and create the user in AA
        if (action == "approve") {
            var result = this.createUser(record);
            if (result.isCreated)
                sts = "granted";
            else
                return result;
        }

        //reject the req
        if (action == "reject") {
            sts = "rejected";
            this.rejectReq(record);
        }

        var details = {
            sts: sts,
            name: record.name,
            pass: this.defaultPass,
            reason: record.rejectReason || ""
        };
        this.addEvent(this.event1, this.reqAccessGR, record.mailID, JSON.stringify(details));

        if (result)
            return result;
    },

    createReq: function(userData) {
        if (!this.insertRecord(userData))
            return 1;
        else {
            this.informAdminOnUsrReq({
                uID: userData.uID,
                name: input.firstName + " " + input.lastName,
                environment: input.environment.toUpperCase()
            });
            return 0;
        }
    },

    createUser: function(record) {
        var userInfo = {
            firstName: record.firstName,
            lastName: record.lastName,
            roleIDs: record.rolesIDs,
            mailID: record.mailID,
            uID: record.uID
        };
        var output = this.AA_API.createUsr(userInfo);
        if (output.isCreated) {
            this.updateIDAndStatus(record.recordSysID, output.id, "granted");
        }
        return output;
    },

    getGrpMembers: function(groupSysID) {
        this.groupMemberGR.addQuery('group', groupSysID);
        this.groupMemberGR.query();
        var users = [];
        // Check if there are any members in the group
        if (this.groupMemberGR.getRowCount() > 0) {
            // Loop through the group members and get user details
            while (this.groupMemberGR.next()) {
                // Get the user record for each member
                var userGR = new GlideRecord('sys_user');
                if (userGR.get(this.groupMemberGR.getValue('user'))) {
                    users.push({
                        name: userGR.getValue('name'),
                        mailID: userGR.getValue('mailID')
                    });
                }
            }
        }
        return users;
    },

    getAllApprovedUsers: function() {
        var logName = this.log + "getAllApprovedUsers >> ";
        if (!this.isAdmin()) {
            gs.error(logName + " Unknown Access found");
            // Add Mail Notification when someone other than admin tried to access it.
            return;
        } else {
            var i = 0;
            var data = [];
            var gd = new GlideDate();

            let table = this.reqAccessGR;
            table.addQuery('status', 'granted');
            table.orderByDesc('sys_created_on');
            table.query();

            while (table.next()) {
                let gdt = new GlideDateTime(table.sys_created_on.toString());
                gdt.add(19800000);
                gd.setValue(gdt.getValue());
                var tmpRoles = this.getRoleName(table.getValue("roles"));
                data.push({
                    no: ++i,
                    name: table.getValue('first_name').toString() + " " + table.getValue('last_name').toString(),
                    mailID: table.getValue('email_id').toString(),
                    uID: table.getValue('x_m_uid').toString(),
                    automationName: table.getValue('automation_name').toString(),
                    environment: table.getDisplayValue('environment').toString(),
                    status: table.getDisplayValue('status').toString(),
                    id: table.getValue("id"),
                    role: tmpRoles,
                    recordSysID: table.getValue("sys_id"),
                    requestedON: gd.getByFormat("dd-MMM-yyyy hh:mm a"),
                });
            }
            return data;
        }
    },

    getAllPendingReq: function() {
        var logName = this.log + "getAllPendingReq >> ";

        if (!this.isAdmin()) {
            gs.error(logName + " Unknown Access found");
            // Add Mail Notification when someone other than admin tried to access it.
            return;
        } else {
            gs.info(logName + "getting all the pending requests.");
            var reqData = [];
            var i = 0;
            var gd = new GlideDate();

            let table = this.reqAccessGR;
            table.addQuery('status', 'pending');
            table.orderByDesc('sys_created_on');
            table.query();

            while (table.next()) {
                var tmpRoles = this.getRoleName(table.getValue("roles"));
                let gdt = new GlideDateTime(table.sys_created_on.toString());
                gdt.add(19800000);
                gd.setValue(gdt.getValue());

                reqData.push({
                    no: ++i,
                    recordSysID: table.getUniqueValue(),
                    firstName: table.getValue('first_name').toString(),
                    lastName: table.getValue('last_name').toString(),
                    name: table.getValue('first_name').toString() + " " + table.getValue('last_name').toString(),
                    mailID: table.getValue('email_id').toString(),
                    uID: table.getValue('x_m_uid').toString(),
                    automationName: table.getValue('automation_name').toString(),
                    environment: table.getDisplayValue('environment').toString(),
                    rolesIDs: table.getDisplayValue("roles").toString(),
                    role: tmpRoles,
                    requestedOn: gd.getByFormat("dd-MMM-yyyy hh:mm a"),
                });
            }
            return reqData;
        }
    },

    getReqRecord: function(recordSysID) {
        var logName = this.log + "getReqRecord >> ";
        var data = this.CmnMethods.getRecord(this.reqAccessGR.getTableName(), recordSysID);
        if(!data){
            gs.info(logName+"Unable to fetch the record.");
            return;
        }
		var tmpRoles = this.getRoleName(data.roles);
		var rolesName = tmpRoles.split(";");
		tmpRoles = data.roles.split(";");
		roles = {displayValue: rolesName.length > 1 ? rolesName.join("####") : rolesName[0], value: tmpRoles.length > 1?tmpRoles.join(","): tmpRoles[0]};

        return {
            firstName: data.first_name,
            lastName: data.last_name,
            mailID: data.email_id,
            automationName: data.automation_name,
            environment: data.environment,
			roles: roles,
			uID: data.x_m_uid,
			rolesTable: 'x_snc_accessprov_0_aa_roles',
            userID: data.id
        };
    },

    getReqHistory: function() {
        // Returns the Request History;
		var logName = this.log + "getReqHistory >> ";
        if (!this.isAdmin()) {
            gs.error(logName + " Unknown Access found");
            // Add Mail Notification when someone other than admin tried to access it.
            return;
        } else {
            var reqData = [];
            var i = 0;
            var gd = new GlideDate();

            let table = this.reqAccessGR;
            table.addEncodedQuery("status!=pending");
            table.orderByDesc('sys_created_on');
            table.query();

            while (table.next()) {
                var tmpRoles = this.getRoleName(table.getValue("roles"));
                let gdt = new GlideDateTime(table.sys_created_on.toString());
                gdt.add(19800000);
                gd.setValue(gdt.getValue());

                reqData.push({
                    no: ++i,
                    uID: table.getValue('x_m_uid').toString(),
                    firstName: table.getValue('first_name').toString(),
                    lastName: table.getValue('last_name').toString(),
                    name: table.getValue('first_name').toString() + " " + table.getValue('last_name').toString(),
                    mailID: table.getValue('email_id').toString(),
                    automationName: table.getValue('automation_name').toString(),
                    environment: table.getDisplayValue('environment').toString(),
                    status: table.getDisplayValue('status').toString(),
                    requestedOn: gd.getByFormat("dd-MMM-yyyy hh:mm a"),
                    role: tmpRoles,
                });
            }
            return reqData;
        }
    },

    getReqHistoryForUser: function(uID) {
        // Returns the Request History of particular user;
        var reqData = [];
        var i = 0;
        var gd = new GlideDate();

        let table = this.reqAccessGR;
        table.addQuery('x_m_uid', uID);
        table.orderByDesc('sys_created_on');
        table.query();

        while (table.next()) {
            let gdt = new GlideDateTime(table.sys_created_on.toString());
            gdt.add(19800000);
            gd.setValue(gdt.getValue());

            reqData.push({
                no: ++i,
                automationName: table.getValue('automation_name').toString(),
                environment: table.getDisplayValue('environment').toString(),
                status: table.getDisplayValue('status').toString(),
                requestedOn: gd.getByFormat("dd-MMM-yyyy hh:mm a"),
            });
        }
        return reqData;
    },

    getRoleName: function(rolesIDs) {
        var logName = this.log + "GetRoleName >> ";
        gs.info(logName + " Reading role IDs using its SYS_IDs...");
        //gs.info(logName + "Role SysIDs are: "+JSON.stringify(rolesIDs));
        var tmpRoles = Array.isArray(rolesIDs) ? rolesIDs : rolesIDs.split(",");
        var roles = [];

        tmpRoles.forEach(function(id) {
            var gr = new GlideRecord("x_snc_accessprov_0_aa_roles");
            gr.get(id);
            roles.push(gr.name);
        });

        if (Array.isArray(rolesIDs)) {
            return roles;
        } else {
            return roles.length > 0 ? roles.join(";") : null;
        }

    },

	getRoles: function(){
        var roles = [];
		var gr = new GlideRecord("x_snc_accessprov_0_aa_roles");
		gr.query();
		while(gr.next())
			roles.push({name:gr.name,sysID:gr.sys_id});
		return roles;
	},

    informAdminOnUsrReq: function(userInfo) {
        var adminDetails = this.getGrpMembers(this.adminGroupID); // sys_id of admin group is provided
        var details = {
            userInfo: userInfo,
            adminDetails: adminDetails
        };
        this.addEvent(this.event2, this.groupMemberGR, "yashwanthgowda.hr@external.merckgroup.com", JSON.stringify(details));
        gs.info("ScriptInclude: Event Created");
    },

    /**
     * Foo takes any argument.
     * The return value is 'baz' in all cases.
     * @param {json} input - It should contains keys i.e 
     * firstName[string], lastName[string], mailId[string], uID[string], automationName[string], environment[string], optional - roles[string][default value is 224 - AAE_Basic] - roles containing role id separated by comma.
     * @return {string} result - it will contain sysID of the record which is being created, else it will return null.
     */
    insertRecord: function(input) {
        // Insert Record into RequestAccess table.	
        var logName = this.log + "insertRecord >> ";
        let table = this.reqAccessGR;
        table.addEncodedQuery('x_m_uid=' + input.uID + "^automation_name=" + input.automationName + "^environment=" + input.environment + "^status=pending^ORstatus=granted");
        table.query();
        if (!table.hasNext()) {
            table.initialize(); //create an empty record before inserting.
            table.setValue('first_name', input.firstName);
            table.setValue('last_name', input.lastName);
            table.setValue('email_id', input.mailID);
            table.setValue('automation_name', input.automationName);
            table.setValue('environment', input.environment);
            table.setValue('x_m_uid', input.uID);
            //
            var recordSysID = table.insert();
            return recordSysID;
        } else
            gs.info(logName + "Record already exists for this input. " + JSON.stringify(input));
    },

    isAdmin: function() {
        return gs.getUser().isMemberOf(this.adminGroupID);
    },

    rejectReq: function(record) {
        var logName = this.log + "rejectReq >> ";
        gs.info(logName + "Rejecting the request...");
        let table = this.reqAccessGR;
        table.addQuery('sys_id', record.recordSysID);
        table.query();
        if (table.next()) {
            table.setValue('status', 'rejected');
            table.update('updated status of record: ' + record.recordSysID + ' to REJECTED');
        }
    },

    removeUsr: function(uID, userID, recordSysID) {
        var logName = this.log + "removeUser >> ";
        gs.info(logName + "Removing the user with ID: " + userID);
        if (this.AA_API.deleteUsr(uID, userID)) {
            gs.error(logName + "User deletion failed.");
            return 1;
        } else {
            gs.info(logName+"Successfully deleted the user: "+userID)
            let table = this.reqAccessGR;
            table.addQuery('sys_id', recordSysID);
            table.query();
            while (table.next()) {
                table.setValue('id', '');
                table.setValue('status', 'removed');
                table.update("User has been deleted");
            }
            gs.info(logName + "user deleted successfully");
            return 0;
        }
    },

    updateIDAndStatus: function(recordSysID, userNewID, status) {
        var logName = this.log + "updateIDAndStatus >> ";
        var sts = this.CmnMethods.updateRecord(this.reqAccessGR.getTableName(), recordSysID, {id:userNewID, status:status});
        gs.info(sts ? logName+"updated successfully": logName + " Failed to update the ID and Status of the record.");
    },

    /**
     * @param {string} recordSysID - sys_id of record which need to be updated.
     * @param {json} updatedInfo - JSON containing firstName, lastName, mailID, userID, updatedRoles(string of sys_ids).
     * @return {json} result - result will have keys i.e. isUpdated[bool] - if the roles are updated to AA, it will be true, else false and 
                    * msg[string] - if unable to update roles[isUpdated=false], then msg will holds the error message
     */
	updateUserInfo: function(recordSysID,updatedInfo){
        var logName = this.log + "updateUserInfo >> ";
		gs.info(logName + "Updating roles for the record: "+recordSysID);
        
        // update the AA Access Record with latest data
        // var recordData = {first_name: updatedInfo.firstName, last_name: updatedInfo.lastName, roles : updatedInfo.roles, email_id: updatedInfo.mailID};
        // var sts = this.CmnMethods.updateRecord(this.reqAccessGR.getTableName(), recordSysID, recordData);

        // update the data into the table
        var sts = this.CmnMethods.updateRecord(this.reqAccessGR.getTableName(), recordSysID, {roles: updatedInfo.roles});
        gs.info(sts ? logName+"updated successfully": logName + " Failed to update the ID and Status of the record.");

        // update the data into AA
		//let record = this.CmnMethods.getRecord(this.reqAccessGR.getTableName(), recordSysID);
        var roles = this.CmnMethods.getDisplayValueFromRecord(this.reqAccessGR.getTableName(), recordSysID, "roles");
        // replacing existing role's sys_id values with its Displayed values 
        updatedInfo.roleIDs = roles.split(",");
        var result = this.AA_API.updateUserData(updatedInfo);
        gs.info(logName+"Updated User data into AA database successfully");
        return result;
	}
};]]></script>
        <sys_class_name>sys_script_include</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2023-12-21 06:28:28</sys_created_on>
        <sys_id>beeac034e95331107f445943278c189f</sys_id>
        <sys_mod_count>15</sys_mod_count>
        <sys_name>APCommonFunctions</sys_name>
        <sys_package display_value="AccessProvider" source="x_snc_accessprov_0">45a6ae6e381631107f4403cbe8102e24</sys_package>
        <sys_policy>read</sys_policy>
        <sys_scope display_value="AccessProvider">45a6ae6e381631107f4403cbe8102e24</sys_scope>
        <sys_update_name>sys_script_include_beeac034e95331107f445943278c189f</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2024-01-19 12:19:18</sys_updated_on>
    </sys_script_include>
</record_update>
